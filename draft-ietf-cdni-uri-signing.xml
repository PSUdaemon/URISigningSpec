<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-ietf-cdni-uri-signing-14" ipr="trust200902">
  <front>
    <title abbrev="CDNI URI Signing">URI Signing for CDN Interconnection
    (CDNI)</title>

    <author fullname="Ray van Brandenburg" initials="R"
            surname="van Brandenburg">
      <organization>Tiledmedia</organization>

      <address>
        <postal>
          <street>Anna van Buerenplein 1</street>

          <city>Den Haag</city>

          <region/>

          <code>2595DA</code>

          <country>The Netherlands</country>
        </postal>

        <phone>+31 88 866 7000</phone>

        <email>ray@tiledmedia.com</email>
      </address>
    </author>

    <author fullname="Kent Leung" initials="K" surname="Leung">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>3625 Cisco Way</street>

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>United States</country>
        </postal>

        <phone>+1 408 526 5030</phone>

        <email>kleung@cisco.com</email>
      </address>
    </author>

    <author fullname="Phil Sorber" initials="P" surname="Sorber">
      <address>
        <email>sorber@apache.org</email>
      </address>
    </author>

    <date/>

    <workgroup>CDNI</workgroup>

    <abstract>
      <t>This document describes how the concept of URI signing supports the
      content access control requirements of CDNI and proposes a URI signing
      method as a <xref target="RFC7519">JSON Web Token (JWT)</xref> profile.</t>

      <t>The proposed URI signing method specifies the information needed to
      be included in the URI to transmit the signed JWT as well as the claims needed
      by the signed JWT to authorize a UA. The
      mechanism described can be used both in CDNI and single CDN
      scenarios.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>This document describes the concept of URI Signing and how it can be
      used to provide access authorization in the case of redirection between
      interconnected CDNs (CDNI) and between a Content Service Provider (CSP)
      and a CDN. The primary goal of URI Signing is to make sure that only
      authorized User Agents (UAs) are able to access the content, with a CSP
      being able to authorize every individual request. It should be noted
      that URI Signing is not a content protection scheme; if a CSP wants to
      protect the content itself, other mechanisms, such as Digital Rights Management (DRM), are more
      appropriate. In addition to access control, URI Signing also has
      benefits in reducing the impact of denial-of-service attacks.</t>

      <t>The overall problem space for CDN Interconnection (CDNI) is described
      in <xref target="RFC6707">CDNI Problem Statement</xref>. This
      document, along with the <xref target="RFC7337">CDNI Requirements</xref>
      document and the <xref target="RFC7336">CDNI Framework</xref>, describes the need
      for interconnected CDNs to be able to implement an access control
      mechanism that enforces the CSP's distribution policy.</t>

      <t>Specifically, <xref target="RFC7336">CDNI Framework</xref>
      states:</t>

      <t><list style="empty">
        <t>The CSP may also trust the CDN operator to perform actions such as
        ..., and to enforce per-request authorization performed by the CSP using
        techniques such as URI signing.</t>
      </list></t>

      <t>In particular, the following requirement is listed in <xref
      target="RFC7337">CDNI Requirements</xref>:</t>

      <t><list style="empty">
        <t>MI-16 {HIGH} The CDNI Metadata interface shall allow signaling of
        authorization checks and validation that are to be performed by the
        Surrogate before delivery.  For example, this could potentially
        include the need to validate information (e.g., Expiry time, Client
        IP address) required for access authorization.</t>
      </list></t>

      <t>This document proposes a method of signing URIs that allows Surrogates in
      interconnected CDNs to enforce a per-request authorization performed by
      the CSP. Splitting the role of performing per-request authorization by
      the CSP and the role of validating this authorization by the CDN allows
      any arbitrary distribution policy to be enforced across CDNs without the
      need of CDNs to have any awareness of the actual CSP distribution
      policy.</t>

      <t>The representation of this method is a Signed JSON Web Token (JWT) <xref target="RFC7519"/>.</t>

      <section title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
        "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
        when, and only when, they appear in all capitals, as shown here.</t>

        <t>This document uses the terminology defined in <xref
        target="RFC6707">CDNI Problem Statement</xref>.</t>

        <t>This document also uses the terminology of <xref
        target="RFC7519">JSON Web Token (JWT)</xref>.</t>

        <t>In addition, the following terms are used throughout this
        document:</t>

        <t><list style="symbols">
            <t>Signed URI: A URI for which a signed JWT is provided.</t>

            <t>Target CDN URI: URI created by the CSP to direct a UA
            towards the Upstream CDN (uCDN). The Target CDN URI can be signed by the
            CSP and verified by the uCDN and possibly further Downstream CDNs (dCDNs).</t>

            <t>Redirection URI: URI created by the uCDN to redirect a UA
            towards the dCDN. The Redirection URI can be signed by
            the uCDN and verified by the dCDN. In a cascaded
            CDNI scenario, there can be more than one Redirection URI.</t>

            <t>Signed Token Renewal: A series of signed JWTs that are used for subsequent
            access to a set of related resources in a CDN, such as a set of HTTP
            Adaptive Streaming files. Every time a signed JWT is used to
            access a particular resource, a new signed JWT is sent along
            with the resource that can be used to request the next resource
            in the set. When generating a new signed JWT in Signed Token Renewal,
            parameters are carried over from one signed JWT to the next.</t>
          </list></t>
      </section>

      <section anchor="background"
               title="Background and overview on URI Signing ">
        <t>A CSP and CDN are assumed to have a trust relationship that enables
        the CSP to authorize access to a content item by including a set of
        claims in the form of a signed JWT in the URI before redirecting a UA to the CDN. Using these
        attributes, it is possible for a CDN to check an incoming content
        request to see whether it was authorized by the CSP (e.g., based on the
        UA's IP address or a time window). To prevent the UA from altering the claims
        a signed JWT is REQUIRED.</t>

        <t>Figure 1, shown below, presents an overview of the URI Signing
        mechanism in the case of a CSP with a single CDN. When the UA browses
        for content on CSP's website (#1), it receives HTML web pages with
        embedded content URIs. Upon requesting these URIs, the CSP redirects
        to a CDN, creating a Target CDN URI (#2) (alternatively, the Target
        CDN URI itself is embedded in the HTML). The Target CDN URI is the
        Signed URI which may include the IP address of the UA and/or a time
        window and always contains the signed JWT which is generated by the
        CSP using a shared secret or private key. Once the UA receives the
        response with the Signed URI, it sends a new HTTP request using the
        Signed URI to the CDN (#3). Upon receiving the request, the CDN
        checks to see if the Signed URI is authentic by verifying the signed JWT.
        If applicable, it checks whether the IP address of the HTTP
        request matches that in the Signed URI and if the time window is still
        valid. After these claims are confirmed to be valid, the CDN delivers
        the content (#4).</t>

        <figure anchor="fig_single_cdn"
                title="Figure 1: URI Signing in a CDN Environment">
          <artwork>
                --------
               /        \
               |   CSP  |&lt; * * * * * * * * * * *
               \        /        Trust         *
                --------      relationship     *
                  ^  |                         *
                  |  |                         *
       1. Browse  |  | 2. Signed               *
            for   |  |    URI                  *
          content |  |                         *
                  |  v                         v
                +------+ 3. Signed URI     --------
                | User |-----------------&gt;/        \
                | Agent|                  |  CDN   |
                |      |&lt;-----------------\        /
                +------+ 4. Content        --------
                            Delivery
</artwork>
        </figure>
      </section>

      <section title="CDNI URI Signing Overview">
        <t>In a CDNI environment, URI Signing operates the same way in the
        initial steps #1 and #2 but the later steps involve multiple CDNs in
        the process of delivering the content. The main difference from the
        single CDN case is a redirection step between the uCDN and the
        dCDN. In step #3, UA may send an HTTP request or a DNS request.
        Depending on whether HTTP-based or DNS-based request routing is used,
        the uCDN responds by directing the UA towards the
        dCDN using either a Redirection URI (which is a Signed URI generated by
        the uCDN) or a DNS reply, respectively (#4). Once the UA
        receives the response, it sends the Redirection URI/Target CDN URI to
        the dCDN (#5). The received URI is validated by the
        dCDN before delivering the content (#6). This is depicted in
        the figure below. Note: The CDNI call flows are covered in <xref
        target="operation">Detailed URI Signing Operation</xref>.</t>

        <figure title="Figure 2: URI Signing in a CDNI Environment">
          <artwork>
                                   +-------------------------+
                                   |Request Redirection Modes|
                                   +-------------------------+
                                   | a) HTTP                 |
                                   | b) DNS                  |
                                   +-------------------------+
                --------
               /        \&lt; * * * * * * * * * * * * * *
               |   CSP  |&lt; * * * * * * * * * * *     *
               \        /        Trust         *     *
                --------      relationship     *     *
                  ^  |                         *     *
                  |  | 2. Signed               *     *
       1. Browse  |  |    URI in               *     *
            for   |  |    HTML                 *     *
          content |  |                         *     *
                  |  v   3.a)Signed URI        v     *
                +------+   b)DNS request   --------  * Trust
                | User |-----------------&gt;/        \ * relationship
                | Agent|                  |  uCDN  | * (optional)
                |      |&lt;-----------------\        / *
                +------+ 4.a)Redirection URI-------  *
                  ^  |     b)DNS Reply         ^     *
                  |  |                         *     *
                  |  |      Trust relationship *     *
                  |  |                         *     *
      6. Content  |  | 5.a)Redirection URI     *     *
         delivery |  |   b)Signed URI(after    v     v
                  |  |     DNS exchange)      --------
                  |  +----------------------&gt;/        \ [May be
                  |                          |  dCDN  |  cascaded
                  +--------------------------\        /  CDNs]
                                              --------

             +-----------------------------------------+
             | Key |    Asymmetric   |    Symmetric    |
             +-----------------------------------------+
             |HTTP |Public key (uCDN)|Shared key (uCDN)|
             |DNS  |Public key (CSP) |Shared key (CSP) |
             +-----------------------------------------+
           </artwork>
        </figure>

        <t>The trust relationships between CSP, uCDN, and
        dCDN have direct implications for URI Signing. In the case shown in
        Figure 2, the CDN that the CSP has a trust relationship with is the
        uCDN. The delivery of the content may be delegated to the
        dCDN, which has a relationship with the uCDN but may
        have no relationship with the CSP.</t>

        <t>In CDNI, there are two methods for request routing: DNS-based and
        HTTP-based. For DNS-based request routing, the Signed URI (i.e., Target
        CDN URI) provided by the CSP reaches the dCDN directly. In
        the case where the dCDN does not have a trust relationship
        with the CSP, this means that either an asymmetric public/private key
        method needs to be used for computing the signed JWT (because the CSP and
        dCDN are not able to exchange symmetric shared secret keys), or
        the CSP needs
        to allow the uCDN to redistribute shared keys
        to a subset of their dCDNs.</t>

        <t>For HTTP-based request routing, the Signed URI (i.e., Target CDN
        URI) provided by the CSP reaches the uCDN. After this URI has
        been verified to be correct by the uCDN, the uCDN
        creates and signs a new Redirection URI to redirect the UA to the
        dCDN. Since this new URI could have a new signed JWT, a
        new signature can be based around the trust relationship between the
        uCDN and dCDN, and the relationship between the
        dCDN and CSP is not relevant. Given the fact that such a
        relationship between uCDN and dCDN always exists,
        both asymmetric public/private keys and symmetric shared secret keys
        can be used for URI Signing with HTTP-based request routing. Note that the signed Redirection URI MUST
        maintain the same, or higher, level of security as the original Signed
        URI.</t>

        <t>Two types of keys can be used for URI Signing: asymmetric keys and
        symmetric keys. Asymmetric keys are based on a public/private key pair
        mechanism and always contain a private key only known to the entity
        signing the URI (either CSP or uCDN) and a public key for the
        verification of the Signed URI. With symmetric keys, the same key is
        used by both the signing entity for signing the URI as well as by the
        validating entity for validating the Signed URI. Regardless of the type
        of keys used, the validating entity has to obtain the key (either the
        public or the symmetric key). There are very different requirements for
        key distribution (out of scope of this document) with asymmetric keys
        and with symmetric keys. Key distribution for symmetric keys requires
        confidentiality to prevent another party from getting access to the key,
        since it could then generate valid Signed URIs for unauthorized
        requests. Key distribution for asymmetric keys does not require
        confidentiality since public keys can typically be distributed openly
        (because they cannot be used for URI signing) and private keys are kept
        by the URI signing function.</t>
      </section>

      <section title="URI Signing in a non-CDNI context">
        <t>While the URI signing method defined in this document was primarily
        created for the purpose of allowing URI Signing in CDNI scenarios,
        e.g., between a uCDN and a dCDN or between a CSP and a dCDN, there is
        nothing in the defined URI Signing method that precludes it from being
        used in a non-CDNI context. As such, the described mechanism could be
        used in a single-CDN scenario such as shown in <xref
        target="fig_single_cdn"/> in <xref target="background"/>, for example
        to allow a CSP that uses different CDNs to only have to implement a
        single URI Signing mechanism.</t>
      </section>
    </section>

    <section anchor="jwt_profile" title="JWT Format and Processing Requirements">
      <t>The concept behind URI Signing is based on embedding a signed <xref target="RFC7519">JSON Web Token (JWT)
    </xref> in an <xref target="RFC7230">http or https URI</xref> (section 2.7). The signed JWT contains a number of claims that can be validated to ensure the
      UA has legitimate access to the content.</t>

      <t>This document specifies the following attribute for embedding a signed JWT in a Target CDN URI or Redirection URI:</t>

      <t>
        <list style="symbols">
          <t>URI Signing Package (URISigningPackage): The URI attribute that
          encapsulates all the URI Signing claims in a signed JWT encoded
          format. This attribute is exposed in the Signed URI as a URI
          query parameter or as a URL path parameter.</t>
        </list>
      </t>

      <t>The parameter name of the URI Signing Package Attribute is
      defined in the <xref target="metadata">CDNI Metadata</xref>. If the CDNI Metadata interface
      is not used, or does not include a parameter name for the URI Signing
      Package Attribute, the parameter name can be set by configuration (out of
      scope of this document).</t>

      <t>The URI Signing Package will be found by searching the URI, left-to-right,
      for the following sequence:
      <list style="symbols">
        <t>a reserved character (as defined in <xref target="RFC3986"/> Section 2.2),</t>
        <t>the URI Signing Package Attribute name,</t>
        <t>if the last character of the URI Signing Package Attribute name is not a reserved character, an equal symbol ('='),</t>
        <t>and a sequence of non-reserved characters that will be interpreted as a signed JWT,</t>
        <t>terminated by either a reserved character or the end of the URI.</t>
     </list>
     The first such match will be taken to provide the signed JWT; the URI will not be searched
     for multiple signed JWTs.</t>

      <section anchor="jwt_claims" title="JWT Claims">
        <t>This section identifies the set of claims that can be
        used to enforce the CSP distribution policy. New claims can be introduced in the future to extend the
        distribution policy capabilities.</t>

        <t>In order to provide distribution policy flexibility,
        the exact subset of claims used in a given signed JWT is a runtime decision.
        Claim requirements are defined in the <xref target="metadata">CDNI Metadata</xref>
        If the CDNI Metadata interface is not used, or
        does not include claim requirements, the claim requirements
        can be set by configuration (out of scope of this document).</t>

        <t>The following claims (where the "JSON Web Token Claims" registry
        claim name is specified in parenthesis below) are used to enforce the
        distribution policies.  All of the listed claims are mandatory
        to implement in a URI Signing implementation, but are not
        mandatory to use in a given signed JWT. (The "optional" and
        "mandatory" identifiers in square brackets refer to whether or
        not a given claim MUST be present in a URI Signing JWT.)
        A CDN MUST be able to parse and process all of the claims
        listed below.</t>

        <t>Note: See the <xref target="security">Security
        Considerations</xref> section on the limitations of using an
        expiration time and client IP address for distribution policy
        enforcement.</t>

        <section anchor="iss_claim" title="Issuer (iss) claim">
            <t>Issuer (iss) [optional] - The semantics in
            <xref target="RFC7519"/> Section 4.1.1 MUST be followed. This
            claim MAY be used to validate authorization of the issuer of a
            signed JWT and also MAY be used to confirm that the indicated key
            was provided by said issuer.  If the CDN validating the
            signed JWT does not support Issuer validation, or if the
            Issuer in the signed JWT does not match the list of known
            acceptable Issuers, the CDN MUST reject the request. If the
            received signed JWT contains an Issuer claim, then any
            JWT subsequently generated for CDNI redirection MUST also contain an Issuer
            claim, and the Issuer value MUST be updated to identify the
            redirecting CDN.  If the received signed JWT does not
            contain an Issuer claim, an Issuer claim MAY be added to
            a signed JWT generated for CDNI redirection.</t>
        </section>
        <section anchor="sub_claim" title="Subject (sub) claim">
            <t>Subject (sub) [optional] - The semantics in <xref target="RFC7519"/> Section 4.1.2 MUST be followed.
            If this claim is used, it MUST be a JSON Web Encryption (<xref target="RFC7516">JWE</xref>)
            Object in compact serialization form, because it contains
            personally identifiable information. This claim contains
            information about the subject (for example, a user or an agent)
            that MAY be used to validate the signed JWT.
            If the received signed JWT contains a Subject claim, then any
            JWT subsequently generated for CDNI redirection MUST also
            contain a Subject claim, and the Subject value MUST be the same
            as in the received signed JWT. A signed JWT generated for CDNI
            redirection MUST NOT add a Subject claim if no Subject claim
            existed in the received signed JWT.</t>
        </section>
        <section anchor="aud_claim" title="Audience (aud) claim">
            <t>Audience (aud) [optional] - The semantics in <xref target="RFC7519"/> Section 4.1.3 MUST be followed.
            This claim is used to ensure that the CDN that validates the JWT identifies
            itself with the value in this claim.</t>
        </section>
        <section anchor="exp_claim" title="Expiry Time (exp) claim">
            <t>Expiry Time (exp) [optional] - The semantics in <xref target="RFC7519"/> Section 4.1.4 MUST be followed, though URI Signing implementations MUST NOT allow for any time synchronization "leeway".
            Note: The time on the entities that generate and
            validate the signed URI SHOULD be in sync. In the CDNI case, this
            means that CSP, uCDN, and dCDN servers need to be
            time-synchronized. It is RECOMMENDED to use <xref target="RFC5905">NTP</xref> for time synchronization.
            If the CDN validating the signed JWT does not support
            Expiry Time validation, or if the Expiry Time in the
            signed JWT corresponds to a time earlier than the time of
            the content request, the CDN MUST reject the
            request.
            If the received signed JWT contains a Expiry Time claim, then any
            JWT subsequently generated for CDNI redirection MUST also
            contain an Expiry Time claim, and the Expiry Time value MUST be
            the same as in the received signed JWT.  A signed JWT
            generated for CDNI redirection MUST NOT add an Expiry Time
            claim if no Expiry Time claim existed in the received
            signed JWT.</t>
        </section>
        <section anchor="nbf_claim" title="Not Before (nbf) claim">
            <t>Not Before (nbf) [optional] - The semantics in <xref target="RFC7519"/> Section 4.1.5 MUST be followed, though URI Signing implementations MUST NOT allow for any time synchronization "leeway".
            Note: The time on the entities that generate and
            validate the signed URI SHOULD be in sync. In the CDNI case, this
            means that the CSP, uCDN, and dCDN servers need to be
            time-synchronized. It is RECOMMENDED to use <xref target="RFC5905">NTP</xref> for time synchronization.
            If the CDN validating the signed JWT does not support
            Not Before time validation, or if the Not Before time in the
            signed JWT corresponds to a time later than the time of
            the content request, the CDN MUST reject the
            request.
            If the received signed JWT contains a Not Before time claim, then any
            JWT subsequently generated for CDNI redirection MUST also
            contain a Not Before time claim, and the Not Before time value MUST be
            the same as in the received signed JWT.  A signed JWT
            generated for CDNI redirection MUST NOT add a Not Before time
            claim if no Not Before time claim existed in the received
            signed JWT.</t>
        </section>
        <section anchor="iat_claim" title="Issued At (iat) claim">
            <t>Issued At (iat) [optional] - The semantics in <xref target="RFC7519"/> Section 4.1.6 MUST be followed.
            Note: The time on the entities that generate and
            validate the signed URI SHOULD be in sync. In the CDNI case, this
            means that CSP, uCDN, and dCDN servers need to be
            time-synchronized. It is RECOMMENDED to use <xref target="RFC5905">NTP</xref> for time synchronization.
            If the received signed JWT contains an Issued At claim, then any
            JWT subsequently generated for CDNI redirection MUST also contain an Issued At
            claim, and the Issuer value MUST be updated to identify the
            time the new JWT was generated.  If the received signed
            JWT does not contain an Issued At claim, an Issued At
            claim MAY be added to a signed JWT generated for CDNI redirection.</t>
        </section>
        <section anchor="jti_claim" title="Nonce (jti) claim">
            <t>Nonce (jti) [optional] - The semantics in <xref target="RFC7519"/> Section 4.1.7 MUST be followed.
            A Nonce can be used to prevent replay attacks if the CDN stores a
            list of all previously used Nonce values, and validates
            that the Nonce in the current JWT has never been used
            before.  If the signed JWT contains a Nonce claim and the
            CDN validating the signed JWT does not support Nonce
            storage, then the CDN MUST reject the request.
            If the received signed JWT contains a Nonce claim, then any
            JWT subsequently generated for CDNI redirection MUST also
            contain a Nonce claim, and the Nonce value MUST be the
            same as in the received signed JWT.
            If the received signed JWT does not contain a
            Nonce claim, a Nonce claim MUST NOT be added to a signed JWT
            generated for CDNI redirection.</t>
        </section>
        <section anchor="cdniv_claim" title="CDNI Claim Set Version (cdniv) claim">
            <t>CDNI Claim Set Version (cdniv) [optional] - The CDNI Claim Set Version (cdniv)
            claim provides a means within a signed JWT to tie the claim set to a specific version
            of a specificiation. This is intended to allow changes in and facilitate
            upgrades across specifications. The type is JSON integer and the value MUST be set to "1",
            for this version of the specification. In the absence of this claim, the value is assumed
            to be "1". For future versions this claim will be mandatory. Implementations MUST reject
            signed JWTs with unsupported CDNI Claim Set versions.</t>
        </section>
        <section anchor="cdnicrit_claim" title="CDNI Critical Claims Set (cdnicrit) claim">
            <t>CDNI Critical Claims Set (cdnicrit) [optional] - The cdnicrit claim
            indicates that extensions to this specification are being used that
            MUST be understood and processed.  Its value is a comma separated listing
            of claims in the Signed JWT that use those extensions.
            If any of the listed extension claims are not understood
            and supported by the recipient, then the Signed JWT is invalid.  Producers
            MUST NOT include claim names defined by this specification, duplicate names, or names that do not
            occur as claim names within the Signed JWT in the cdnicrit
            list.  Producers MUST NOT use the empty list "" as the cdnicrit
            value.  Recipients MAY consider the Signed JWT to be invalid if the cdnicrit
            list contains any claim names defined by this
            specification or if any other constraints
            on its use are violated.  This claim MUST be understood and processed by implementations.</t>
        </section>
        <section anchor="cdniip_claim" title="Client IP (cdniip) claim">
            <t>Client IP (cdniip) [optional] IP address, or IP prefix, for
            which the Signed URI is valid. This is represented in CIDR
            notation, with dotted decimal format for IPv4 or canonical text
            representation for <xref target="RFC5952">IPv6 addresses</xref>.
            The request is rejected if sourced from a client outside of the
            specified IP range. Since the client IP is considered
            personally identifiable information this field
            MUST be a JSON Web Encryption (<xref target="RFC7516">JWE</xref>)
            Object in compact serialization form.  If the CDN validating the
            signed JWT does not support Client IP validation, or if the
            Client IP in the signed JWT does not match the source IP
            address in the content request, the CDN MUST
            reject the request. The type of this claim is a JSON string that
            contains the JWE.
            If the received signed JWT contains a Client IP claim, then any
            JWT subsequently generated for CDNI redirection MUST also
            contain a Client IP claim, and the Client IP value MUST be
            the same as in the received signed JWT.  A signed JWT
            generated for CDNI redirection MUST NOT add a Client IP
            claim if no Client IP claim existed in the received
            signed JWT.</t>
        </section>
        <section anchor="cdniuc_claim" title="CDNI URI Container (cdniuc) claim">
            <t>URI Container (cdniuc) [optional] -
            Container for holding the URI representation before a URI Signing Package is
            added. This representation can take one of several forms detailed in
            <xref target="uri_container_forms"/>. If the URI regex in the signed
            JWT does not match the URI of the content request,  the CDN validating the
            signed JWT MUST reject the request. When comparing the URI, the percent encoded
            form as defined in <xref target="RFC3986"/> Section 2.1 MUST be used. When
            redirecting a URI, the CDN generating the new signed JWT MAY change the URI
            Container to comport with the URI being used in the redirection.</t>
        </section>
        <section anchor="cdniets_claim" title="CDNI Expiration Time Setting (cdniets) claim">
            <t>CDNI Expiration Time Setting (cdniets) [optional] - The CDNI Expiration
            Time Setting (cdniets) claim provides a means for setting the value
            of the Expiry Time (exp) claim when generating a subsequent signed JWT
            in Signed Token Renewal. Its type is a JSON numeric value. It
            denotes the number of seconds to be added to the time at which the JWT is validated
            that gives the value of the Expiry Time (exp) claim of the next signed JWT.
            The CDNI Expiration Time Setting (cdniets) SHOULD NOT be used when not using Signed Token Renewal
            and MUST be present when using Signed Token Renewal.</t>
        </section>
        <section anchor="cdnistt_claim" title="CDNI Signed Token Transport (cdnistt) claim">
          <t>CDNI Signed Token Transport (cdnistt) [optional] - The CDNI Signed Token Transport (cdnistt) claim
          provides a means of signalling the method through which a new signed JWT
          is transported from the CDN to the UA and vice versa for the purpose of Signed Token Renewal. Its type is a JSON integer.
          Values for this claim can be defined in <xref target="sec.IANA.cdnistt"/>. If using
          this claim you MUST also specify a CDNI Expiration Time Setting (cdniets) as noted above.</t>
        </section>
        <section anchor="cdnistd_claim" title="CDNI Signed Token Depth (cdnistd) claim">
          <t>CDNI Signed Token Depth (cdnistd) [optional] - The CDNI Signed Token Depth (cdnistd) claim is used to
          associate a subsequent signed JWT generated as the result of a CDNI Signed Token Transport claim
          with a specific URI subset. Its type is a JSON integer. Signed JWTs MUST NOT use a negative
          value for the CDNI Signed Token Depth claim.</t>
          <t>If the transport used for Signed Token Transport allows the CDN to associate the path component of a
          URI with tokens, the CDNI Signed Token Depth value is the number of path segments that should be
          considered significant for this association. A CDNI Signed Token Depth of zero means that the
          client SHOULD be directed to return the token with requests for any path. If the CDNI Signed
          Token Depth is greater than zero, then the client SHOULD be directed to return the token for
          future requests wherein the first CDNI Signed Token Depth segments of the path match the first
          CDNI Signed Token Depth segments of the signed URI path. This matching MUST use the URI with the
          token removed, as specified in <xref target="uri_container_forms"/>.</t>
          <t>If the URI path to match contains fewer segments than the CDNI Signed Token Depth claim, a signed JWT
          MUST NOT be generated for the purposes of Signed Token Renewal. If the CDNI Signed Token Depth
          claim is omitted, it means the same thing as if its value were zero. If the received signed JWT
          contains a CDNI Signed Token Depth claim, then any JWT subsequently generated for CDNI
          redirection or Signed Token Transport MUST also contain a CDNI Signed Token Depth claim, and the
          value MUST be the same as in the received signed JWT.</t>
        </section>
        <section anchor="uri_container_forms" title="URI Container Forms">
          <t>The URI Container (cdniuc) claim takes one of the following forms. More forms may be added in the future to extend the capabilities.</t>
          <t>Before utilizing a URI with this container, the following steps MUST be performed:
          <list style="symbols">
            <t>Prior to validation, remove the signed JWT from
              the URI. This removal is only for the purpose of determining if the URI matches; all
              other purposes will use the original URI. If the signed JWT is terminated by anything
              other than a sub-delimiter (as definined in <xref target="RFC3986"/> Section 2.2),
              everything from the reserved character (as defined in <xref target="RFC3986"/> Section 2.2)
              that precedes the URI Signing Package Attribute to the last character of the signed
              JWT will be removed, inclusive. Otherwise, everything from the first character of the
              URI Signing Package Attribute to the sub-delimiter that terminates the signed
              JWT will be removed, inclusive.</t>
            <t>Normalize the URI according to <xref target="RFC7230">section 2.7.3</xref> and
              <xref target="RFC3986"/> sections 6.2.2 and 6.2.3. This applies to both generation
              and validation of the signed JWT.</t>
          </list></t>

          <section anchor="uri_container_forms_hash" title="URI Hash Container (hash:)">
              <t>Prefixed with 'hash:', this string is a URL Segment form (<xref target="RFC6920"/> Section 5) of the URI.</t>
          </section>

          <section anchor="uri_container_forms_regex" title="URI Regular Expression Container (regex:)">
              <t>Prefixed with 'regex:', this string is any <xref target="POSIX.1">POSIX</xref> Section 9 Extended
              Regular Expression compatible regular expression used to match against the requested URI.
              These regular expressions MUST be evaluated in the POSIX locale (<xref target="POSIX.1">POSIX</xref> Section 7.2).
              </t>

              <t>Note: Because '\' has special meaning in JSON <xref target="RFC7159"/> as the escape character within JSON strings, the regular expression character '\' MUST be escaped as '\\'.</t>

              <t>An example of a 'regex:' is the following:</t>
              <t>
                <figure>
                  <artwork>
[^:]*\\://[^/]*/folder/content/quality_[^/]*/segment.{3}\\.mp4(\\?.*)?
                  </artwork>
                </figure>
              </t>

              <t>Note: Due to computational complexity of executing arbitrary regular expressions, it is RECOMMENDED to only execute after validating the JWT to ensure its authenticity.</t>
          </section>
        </section>
      </section>

      <section anchor="jwt_header" title="JWT Header">
      <t>The header of the JWT MAY be passed via the CDNI Metadata interface instead of
      being included in the URISigningPackage. The header value must be transmitted in
      the serialized encoded form and prepended to the JWT payload and signature passed in
      the URISigningPackage prior to validation. This reduces the size of the signed JWT
      token.</t>
      </section>
    </section>

    <section anchor="uri_signing_token_renewal" title="URI Signing Token Renewal">
      <section anchor="token_renewal_intro" title="Overview">
        <t>For content that is delivered via HTTP in a segmented fashion,
        such as <xref target="MPEG-DASH">MPEG-DASH</xref> or <xref target="RFC8216"> HTTP Live Streaming (HLS)</xref>,
        special provisions need to be made in order to ensure URI Signing can be
        applied. In general, segmented protocols work by breaking large objects
        (e.g. videos) into a sequence of small independent segments. Such segments
        are then referenced by a separate manifest file, which either includes
        a list of URLs to the segments or specifies an algorithm through which
        a User Agent can construct the URLs to the segments. Requests for segments
        therefore originate from the manifest file and, unless the URLs in the
        manifest file point to the CSP, are not subjected to redirection and URI Signing.
        This opens up the vulnerability of malicious User Agents sharing the
        manifest file and deep-linking to the segments.</t>

        <t>One method for dealing with this vulnerability would be to include, in
        the manifest itself, Signed URIs that point to the individual segments.
        There exist a number of issues with that approach. First, it requires the
        CDN delivering the manifest to rewrite the manifest file for each User Agent,
        which would require the CDN to be aware of the exact segmentation protocol
        used. Secondly, it could also require the expiration time of the
        Signed URIs to be valid for an extended duration if the content
        described by the manifest is meant to be consumed in real time. For instance, if the manifest file were
        to contain a segmented video stream of more than 30 minutes in length,
        Signed URIs would require to be valid for a at least 30 minutes, thereby reducing
        their effectiveness and that of the URI Signing mechanism in general.
        For a more detailed analysis of how segmented protocols such as HTTP Adaptive Streaming protocols affect CDNI,
        see <xref target="RFC6983">Models for HTTP-Adaptive-Streaming-Aware CDNI</xref>.</t>

        <t>The method described in this section allows CDNs to use URI Signing
        for segmented content without
        having to include the Signed URIs in the manifest files themselves.</t>
      </section>

      <section anchor="uri_signing_mechanism" title="Signed Token Renewal mechanism">
        <t>In order to allow for effective access control of segmented content, the
        URI signing mechanism defined in this section is based on a method
        through which subsequent segment requests can be linked together.
        As part of the JWT validation procedure, the CDN can generate a new
        signed JWT that the UA can use to do a subsequent request. More specifically,
        whenever a UA successfully retrieves a segment, it receives, in the
        HTTP 2xx Successful message, a signed JWT that it can use whenever it
        requests the next segment. As long as each successive signed JWT
        is correctly validated before a new one is generated, the model is not
        broken and the User Agent can successfully retrieve additional segments.
        Given the fact that with segmented protocols, it is usually not possible to
        determine a priori which segment will be requested next (i.e., to allow for
        seeking within the content and for switching to a different representation),
        the Signed Token Renewal uses the
        URI Regular Expression Container scoping mechanisms in the URI Container
        (cdniuc) claim to allow a signed JWT to be valid for more than one URL.</t>

        <t>In order for this renewal of signed JWTs to work, it is necessary for
        a UA to extract the signed JWT from the HTTP 2xx Successful message of an
        earlier request and use it to retrieve the next segment. The exact mechanism
        by which the client does this depends on the exact segmented protocol and since
        this document is only concerned with the generation and validation of
        incoming request, this process is outside the scope of this document.
        However, in order to also support legacy UAs that do not include any
        specific provisions for the handling of signed JWTs, the folowing section
        defines a mechanism using HTTP Cookies that allows such UAs to support
        the concept of renewing signed JWTs without requiring any support on
        the UA side.</t>

        <section title="Required Claims">
          <t>The <xref target="cdnistt_claim">cdnistt claim</xref> and <xref target="cdniets_claim">cdniets claim</xref>
          MUST both be present to utilize Signed token Renewal. Either one MUST NOT appear alone. You MAY set cdnistt to
          a value of '0' to mean no Signed Token Renewal, but you still MUST have a corresponding cdniets that validates as
          a JSON number. However, if you do not want to use Signed Token Renewal, it is RECOMMENDED to simply omit both.</t>
        </section>
      </section>

      <section anchor="communicating_token" title="Communicating a signed JWTs in Signed Token Renewal">
        <t>This section assumes the value of the CDNI Signed Token Transport (cdnistt) claim
        has been set to 1. Other values of cdnistt are out of scope of this document. </t>

        <t>When using the Signed Token Renewal mechanism, the signed JWT is
        transported to the UA via a 'URISigningPackage' cookie added to the
        HTTP 2xx Successful message along with the content being returned to
        the UA, or to the HTTP 3xx Redirection message in case the UA is
        redirected to a different server.</t>

        <section title="Support for cross-domain redirection">
          <t>For security purposes, the use of cross-domain cookies is not supported
          in some application environments. As a result, the Cookie-based
          method for transport of the Signed Token described in the previous
          section might break if used in combination with a HTTP 3xx Redirection
          response where the target URL is in a different domain. In such
          scenarios, Signed Token Renewal of a signed JWT SHOULD be communicated
          via the query string instead, in a similar fashion to how regular
          signed JWTs (outside of Signed Token Renewal) are communicated. Note that
          the use of URL embedded signed JWTs SHOULD NOT be used in HTTP 2xx Successful
          messages, since UAs might not know how to extract the signed JWTs.</t>

          <t>Note that the process described below only works in cases where both the manifest
          file and segments constituting the segmented content are delivered from
          the same domain. In other words, any redirection between different domains needs to be
          carried out while retrieving the manifest file.</t>
        </section>
      </section>
    </section>

    <section anchor="cdni_interfaces"
             title="Relationship with CDNI Interfaces">
      <t>Some of the CDNI Interfaces need enhancements to support URI Signing.
      As an example: A dCDN that supports URI Signing needs to be
      able to advertise this capability to the uCDN. The uCDN
      needs to select a dCDN based on such capability when the CSP
      requires access control to enforce its distribution policy via URI
      Signing. Also, the uCDN needs to be able to distribute via the
      CDNI Metadata interface the information necessary to allow the
      dCDN to validate a Signed URI. Events that pertain to URI
      Signing (e.g., request denial or delivery after access authorization)
      need to be included in the logs communicated through the CDNI Logging
      interface (Editor's Note: Is this within the scope of the CDNI Logging
      interface?).</t>

      <section anchor="control" title="CDNI Control Interface">
        <t>URI Signing has no impact on this interface.</t>
      </section>

      <section anchor="advertisement"
               title="CDNI Footprint &amp; Capabilities Advertisement Interface">
        <t>The CDNI Request Routing: Footprint and Capabilities
        Semantics document <xref target="RFC8008"/> defines support for
        advertising CDNI Metadata capabilities, via CDNI Payload
        Type. The CDNI Payload Type registered in <xref target="sec.IANA.payload"/>
        can be used for capability advertisement.</t>
      </section>

      <section anchor="redirection"
               title="CDNI Request Routing Redirection Interface">
        <t>The <xref target="RFC7975">CDNI Request Routing
        Redirection Interface</xref> describes the recursive request
        redirection method. For URI Signing, the uCDN signs the URI
        provided by the dCDN. URI Signing therefore has has no impact
        on this interface.</t>
      </section>

      <section anchor="metadata" title="CDNI Metadata Interface">
        <t>The <xref target="RFC8006">CDNI Metadata
        Interface</xref> describes the CDNI metadata distribution needed to
        enable content acquisition and delivery. For URI Signing, a new
        CDNI metadata object is specified.</t>

        <t>The UriSigning Metadata object contains information to enable URI
        signing and validation by a dCDN. The UriSigning properties are
        defined below.</t>

        <t><list style="empty">
            <t>Property: enforce<list style="empty">
                <t>Description: URI Signing enforcement flag. Specifically,
                this flag indicates if the access to content is subject to URI
                Signing. URI Signing requires the dCDN to ensure
                that the URI must be signed and validated before
                delivering content. Otherwise, the dCDN does not perform
                validation, regardless of whether or not the URI is signed.</t>

                <t>Type: Boolean</t>

                <t>Mandatory-to-Specify: No. The default is true.</t>
              </list></t>

            <t>Property: issuers<list style="empty">
                <t>Description: A list of valid Issuers against which
                the Issuer claim in the signed JWT may be validated.</t>

                <t>Type: Array of Strings</t>

                <t>Mandatory-to-Specify: No. The default is an empty
                list.  An empty list means that any Issuer is acceptable.</t>
              </list></t>

            <t>Property: package-attribute<list style="empty">
                <t>Description: The name to use for the URI Signing
                Package.</t>

                <t>Type: String</t>

                <t>Mandatory-to-Specify: No. Default is
                "URISigningPackage".</t>
              </list></t>

            <t>Property: jwt-header<list style="empty">
                <t>Description: The header part of JWT that is used for generating
                or validating a signed JWT when the JWT token in the URI Signing
                Package does not contain a header part.</t>

                <t>Type: String</t>

                <t>Mandatory-to-Specify: No. A jwt-header is not essential for all
                implementations of URI signing.</t>
              </list></t>
          </list></t>

        <t>The following is an example of a URI Signing metadata payload with all default values:</t>

        <figure>
          <artwork><![CDATA[

{
  "generic-metadata-type": "MI.UriSigning"
  "generic-metadata-value": {}
}
]]>
          </artwork>
        </figure>

        <t>The following is an example of a URI Signing metadata payload with explicit values:</t>

        <figure>
          <artwork><![CDATA[

{
  "generic-metadata-type": "MI.UriSigning"
  "generic-metadata-value":
    {
      "enforce": true,
      "issuers": ["csp", "ucdn1", "ucdn2"],
      "package-attribute": "usp"
    }
}
]]>
          </artwork>
        </figure>

      </section>

      <section anchor="logging" title="CDNI Logging Interface">
        <t>For URI Signing, the dCDN reports that enforcement of the
        access control was applied to the request for content delivery. When
        the request is denied due to enforcement of URI Signing, the reason is
        logged.</t>

        <t>The following CDNI Logging field for URI Signing SHOULD be
        supported in the HTTP Request Logging Record as specified in <xref
        target="RFC7937">CDNI Logging Interface</xref>,
        using the new "cdni_http_request_v2" record-type registered in
        <xref target="sec.IANA.record_type.cdni_http_request_v2"/>.</t>

        <t><list style="symbols">
            <t>s-uri-signing (mandatory): <list>
                <t>format: 3DIGIT</t>

                <t>field value: this characterises the URI signing validation
                performed by the Surrogate on the request. The allowed values
                are:<list>
                    <t>"000" : no signed JWT validation performed</t>

                    <t>"200" : signed JWT validation performed and
                    validated</t>

                    <t>"400" : signed JWT validation performed and rejected
                    because of incorrect signature</t>

                    <t>"401" : signed JWT validation performed and rejected
                    because of Expiration Time enforcement</t>

                    <t>"402" : signed JWT validation performed and rejected
                    because of Client IP enforcement</t>

                    <t>"403" : signed JWT validation performed and rejected
                    because of URI Regular Expression enforcement</t>

                    <t>"404" : signed JWT validation performed and rejected
                    because of Issuer enforcement</t>

                    <t>"405" : signed JWT validation performed and rejected
                    because of Not Before enforcement</t>

                    <t>"500" : unable to perform signed JWT validation
                    because of malformed URI</t>
                  </list></t>

                <t>occurrence: there MUST be zero or exactly one instance of
                this field.</t>
              </list></t>

            <t>s-uri-signing-deny-reason (optional): <list>
                <t>format: QSTRING</t>

                <t>field value: a string for providing further information in
                case the signed JWT was rejected, e.g., for debugging
                purposes.</t>

                <t>occurrence: there MUST be zero or exactly one instance of
                this field.</t>
              </list></t>
          </list></t>
      </section>
    </section>

    <section anchor="operation" title="URI Signing Message Flow">
      <t>URI Signing supports both HTTP-based and DNS-based request routing.
      <xref target="RFC7519">JSON Web Token (JWT)</xref> defines a
      compact, URL-safe means of representing
      claims to be transferred between two parties.  The claims in a signed JWT
      are encoded as a JSON object that is used as the payload of a JSON
      Web Signature (JWS) structure or as the plaintext of a JSON Web
      Encryption (JWE) structure, enabling the claims to be digitally
      signed or integrity protected with a Message Authentication Code
      (MAC) and/or encrypted.</t>

      <section anchor="http" title="HTTP Redirection">
        <t>For HTTP-based request routing, a set of
        information that is unique to a given end user content request
        is included in a signed JWT, using
        key information that is specific to a pair of adjacent CDNI hops (e.g.,
        between the CSP and the uCDN or between the
        uCDN and a dCDN). This allows a CDNI hop to ascertain the
        authenticity of a given request received from a previous CDNI hop.</t>

        <t>The URI signing method described below is based on the following
        steps (assuming HTTP redirection, iterative request routing, and a CDN
        path with two CDNs). Note that uCDN and uCDN are
        used exchangeably.</t>

        <figure title="Figure 3: HTTP-based Request Routing with URI Signing">
          <artwork>
     End-User           dCDN                 uCDN                 CSP
     |                    |                    |                    |
     |            1.CDNI FCI interface used to |                    |
     |         advertise URI Signing capability|                    |
     |                    |-------------------&gt;|                    |
     |                    |                    |                    |
     |              2.Provides information to validate signed JWT   |
     |                    |                    |&lt;-------------------|
     |                    |                    |                    |
     |        3.CDNI Metadata interface used to|                    |
     |           provide URI Signing attributes|                    |
     |                    |&lt;-------------------|                    |
     |4.Authorization request                  |                    |
     |-------------------------------------------------------------&gt;|
     |                    |                    |  [Apply distribution
     |                    |                    |   policy]          |
     |                    |                    |                    |
     |                    |             (ALT: Authorization decision)
     |5.Request is denied |                    |      &lt;Negative&gt;    |
     |&lt;-------------------------------------------------------------|
     |                    |                    |                    |
     |6.CSP provides signed URI                |      &lt;Positive&gt;    |
     |&lt;-------------------------------------------------------------|
     |                    |                    |                    |
     |7.Content request   |                    |                    |
     |----------------------------------------&gt;| [Validate URI      |
     |                    |                    |  signature]        |
     |                    |                    |                    |
     |                    |    (ALT: Validation result)             |
     |8.Request is denied |          &lt;Negative&gt;|                    |
     |&lt;----------------------------------------|                    |
     |                    |                    |                    |
     |9.Re-sign URI and redirect to  &lt;Positive&gt;|                    |
     |  dCDN (newly signed URI)                |                    |
     |&lt;----------------------------------------|                    |
     |                    |                    |                    |
     |10.Content request  |                    |                    |
     |-------------------&gt;| [Validate URI      |                    |
     |                    |  signature]        |                    |
     |                    |                    |                    |
     |    (ALT: Validation result)             |                    |
     |11.Request is denied| &lt;Negative&gt;         |                    |
     |&lt;-------------------|                    |                    |
     |                    |                    |                    |
     |12.Content delivery | &lt;Positive&gt;         |                    |
     |&lt;-------------------|                    |                    |
     :                    :                    :                    :
     :   (Later in time)  :                    :                    :
     |13.CDNI Logging interface to include URI Signing information  |
     |                    |-------------------&gt;|                    |</artwork>
        </figure>

        <t><list style="numbers">
            <t>Using the CDNI Footprint &amp; Capabilities Advertisement
            interface, the dCDN advertises its capabilities
            including URI Signing support to the uCDN.</t>

            <t>CSP provides to the uCDN the information needed to
            validate signed JWTs from that CSP. For example, this
            information may include a key
            value.</t>

            <t>Using the CDNI Metadata interface, the uCDN
            communicates to a dCDN the information needed to
            validate signed JWTs from the uCDN for the given
            CSP. For example, this information may include the URI query
            string parameter name for the URI Signing Package Attribute.</t>

            <t>When a UA requests a piece of protected content from the CSP,
            the CSP makes a specific authorization decision for this unique
            request based on its personal distribution policy.</t>

            <t>If the authorization decision is negative, the CSP rejects the
            request and sends an error code (e.g., 403 Forbidden) in the HTTP
            response.</t>

            <t>If the authorization decision is positive, the CSP computes a
            Signed URI that is based on unique parameters of that request and
            conveys it to the end user as the URI to use to request the
            content.</t>

            <t>On receipt of the corresponding content request, the
            uCDN validates the signed JWT in the URI using the
            information provided by the CSP.</t>

            <t>If the validation is negative, the uCDN rejects
            the request and sends an error code (e.g., 403 Forbidden) in the HTTP
            response.</t>

            <t>If the validation is positive, the uCDN computes a
            Signed URI that is based on unique parameters of that request and
            provides it to the end user as the URI to use to further request the
            content from the dCDN.</t>

            <t>On receipt of the corresponding content request, the
            dCDN validates the signed JWT in the Signed URI using the
            information provided by the uCDN in the CDNI
            Metadata.</t>

            <t>If the validation is negative, the dCDN rejects the
            request and sends an error code (e.g., 403 Forbidden) in the HTTP
            response.</t>

            <t>If the validation is positive, the dCDN serves the
            request and delivers the content.</t>

            <t>At a later time, the dCDN reports logging events that
            include URI signing information.</t>
          </list></t>

        <t>With HTTP-based request routing, URI Signing matches well the
        general chain of trust model of CDNI both with symmetric and
        asymmetric keys because the key information only needs to be specific
        to a pair of adjacent CDNI hops.</t>
      </section>

      <section anchor="dns" title="DNS Redirection">
        <t>For DNS-based request routing, the CSP and uCDN must
        agree on a trust model appropriate to the security requirements of the
        CSP's particular content. Use of asymmetric public/private keys allows
        for unlimited distribution of the public key to dCDNs.
        However, if a shared secret key is preferred, then the CSP may want to
        restrict the distribution of the key to a (possibly empty) subset of
        trusted dCDNs. Authorized Delivery CDNs need to obtain the
        key information to validate the Signed URI.</t>

        <t>The URI signing method described below is based on the following
        steps (assuming iterative DNS request routing and a CDN path with two
        CDNs).</t>

        <figure title="Figure 4: DNS-based Request Routing with URI Signing">
          <artwork>
     End-User            dCDN                 uCDN                CSP
     |                    |                    |                    |
     |            1.CDNI FCI interface used to |                    |
     |         advertise URI Signing capability|                    |
     |                    |-------------------&gt;|                    |
     |                    |                    |                    |
     |              2.Provides information to validate signed JWT   |
     |                    |                    |&lt;-------------------|
     |        3.CDNI Metadata interface used to|                    |
     |           provide URI Signing attributes|                    |
     |                    |&lt;-------------------|                    |
     |4.Authorization request                  |                    |
     |-------------------------------------------------------------&gt;|
     |                    |                    |  [Apply distribution
     |                    |                    |   policy]          |
     |                    |                    |                    |
     |                    |             (ALT: Authorization decision)
     |5.Request is denied |                    |      &lt;Negative&gt;    |
     |&lt;-------------------------------------------------------------|
     |                    |                    |                    |
     |6.Provides signed URI                    |      &lt;Positive&gt;    |
     |&lt;-------------------------------------------------------------|
     |                    |                    |                    |
     |7.DNS request       |                    |                    |
     |----------------------------------------&gt;|                    |
     |                    |                    |                    |
     |8.Redirect DNS to dCDN                   |                    |
     |&lt;----------------------------------------|                    |
     |                    |                    |                    |
     |9.DNS request       |                    |                    |
     |-------------------&gt;|                    |                    |
     |                    |                    |                    |
     |10.IP address of Surrogate               |                    |
     |&lt;-------------------|                    |                    |
     |                    |                    |                    |
     |11.Content request  |                    |                    |
     |-------------------&gt;| [Validate URI      |                    |
     |                    |  signature]        |                    |
     |                    |                    |                    |
     |    (ALT: Validation result)             |                    |
     |12.Request is denied| &lt;Negative&gt;         |                    |
     |&lt;-------------------|                    |                    |
     |                    |                    |                    |
     |13.Content delivery | &lt;Positive&gt;         |                    |
     |&lt;-------------------|                    |                    |
     :                    :                    :                    :
     :   (Later in time)  :                    :                    :
     |14.CDNI Logging interface to report URI Signing information   |
     |                    |-------------------&gt;|                    |
</artwork>
        </figure>

        <t><list style="numbers">
            <t>Using the CDNI Footprint &amp; Capabilities Advertisement
            interface, the dCDN advertises its capabilities
            including URI Signing support to the uCDN.</t>

            <t>CSP provides to the uCDN the information needed to
            validate cryptographic signatures from that CSP. For example, this
            information may include a key.</t>

            <t>Using the CDNI Metadata interface, the uCDN
            communicates to a dCDN the information needed to
            validate cryptographic signatures from the CSP (e.g., the URI query
            string parameter name for the URI Signing Package Attribute). In
            the case of symmetric key, the uCDN checks if the
            dCDN is allowed by CSP to obtain the shared secret
            key.</t>

            <t>When a UA requests a piece of protected content from the CSP,
            the CSP makes a specific authorization decision for this unique
            request based on its arbitrary distribution policy.</t>

            <t>If the authorization decision is negative, the CSP rejects the
            request.</t>

            <t>If the authorization decision is positive, the CSP computes a
            cryptographic signature that is based on unique parameters of that
            request and includes it in the URI provided to the end user to
            request the content.</t>

            <t>End user sends DNS request to the uCDN.</t>

            <t>On receipt of the DNS request, the uCDN redirects
            the request to the dCDN.</t>

            <t>End user sends DNS request to the dCDN.</t>

            <t>On receipt of the DNS request, the dCDN responds with
            IP address of one of its Surrogates.</t>

            <t>On receipt of the corresponding content request, the
            dCDN validates the cryptographic signature in the URI using the
            information provided by the uCDN in the CDNI
            Metadata.</t>

            <t>If the validation is negative, the dCDN rejects the
            request and sends an error code (e.g., 403) in the HTTP
            response.</t>

            <t>If the validation is positive, the dCDN serves the
            request and delivers the content.</t>

            <t>At a later time, dCDN reports logging events that
            includes URI signing information.</t>
          </list></t>

        <t>With DNS-based request routing, URI Signing matches well the
        general chain of trust model of CDNI when used with asymmetric keys
        because the only key information that needs to be distributed across
        multiple, possibly untrusted, CDNI hops is the public key, which
        is generally not confidential.</t>

        <t>With DNS-based request routing, URI Signing does not match well the
        general chain of trust model of CDNI when used with symmetric keys
        because the symmetric key information needs to be distributed across
        multiple CDNI hops, to CDNs with which the CSP may not have a trust
        relationship. This raises a security concern for applicability of URI
        Signing with symmetric keys in case of DNS-based inter-CDN request
        routing.</t>
      </section>
    </section>

    <section anchor="sec.IANA" title="IANA Considerations">
      <section anchor="sec.IANA.payload" title="CDNI Payload Type">

        <t>This document requests the registration of the following CDNI
        Payload Type under the IANA "CDNI Payload Type" registry:</t>

        <texttable>
          <ttcol align="left">Payload Type</ttcol>
          <ttcol align="left">Specification</ttcol>

          <c>MI.UriSigning</c>
          <c>RFCthis</c>
        </texttable>

        <t>[RFC Editor: Please replace RFCthis with the published RFC
        number for this document.]</t>

        <section anchor="sec.IANA.payload.UriSigning" title="CDNI UriSigning Payload Type">
          <t>Purpose: The purpose of this payload type is to distinguish
          UriSigning MI objects (and any associated capability advertisement).</t>
          <t>Interface: MI/FCI</t>
          <t>Encoding: see <xref target="metadata"/></t>

        </section>

      </section>

      <section anchor="sec.IANA.logging_record" title="CDNI Logging Record Type">
        <t>This document requests the registration of the following CDNI
        Logging record-type under the IANA "CDNI Logging record-types" registry:</t>

        <texttable>
          <ttcol align="left">record-types</ttcol>
          <ttcol align="left">Reference</ttcol>
          <ttcol align="left">Description</ttcol>

          <c>cdni_http_request_v2</c>
          <c>RFCthis</c>
          <c>Extension to CDNI Logging Record version 1 for content
          delivery using HTTP, to include URI Signing logging fields</c>
        </texttable>

        <t>[RFC Editor: Please replace RFCthis with the published RFC
        number for this document.]</t>

        <section anchor="sec.IANA.record_type.cdni_http_request_v2"
                 title="CDNI Logging Record Version 2 for HTTP">
          <t>The "cdni_http_request_v2" record-type supports all of
          the fields supported by the "cdni_http_request_v1"
          record-type <xref target="RFC7937"/> plus the
          two additional fields "s-uri-signing" and
          "s-uri-signing-deny-reason", registered by this document in
          <xref target="sec.IANA.fields"/>.  The name,
          format, field value, and occurence information for the two
          new fields can be found in
          <xref target="logging"/> of this
          document.</t>

        </section>

      </section>

      <section anchor="sec.IANA.fields" title="CDNI Logging Field Names">

        <t>This document requests the registration of the following CDNI
        Logging fields under the IANA "CDNI Logging Field Names" registry:</t>

        <texttable>
          <ttcol align="left">Field Name</ttcol>
          <ttcol align="left">Reference</ttcol>

          <c>s-uri-signing</c>
          <c>RFCthis</c>

          <c>s-uri-signing-deny-reason</c>
          <c>RFCthis</c>
        </texttable>

        <t>[RFC Editor: Please replace RFCthis with the published RFC
        number for this document.]</t>

      </section>

      <section anchor="sec.IANA.cdnistt"
               title="CDNI URI Signing Signed Token Transport">
        <t>The IANA is requested to create a new "CDNI URI Signing
        Signed Token Transport" subregistry in the "Content
        Delivery Networks Interconnection (CDNI) Parameters" registry.
        The "CDNI URI Signing Signed Token Transport"
        namespace defines the valid values
        that may be in the Signed Token Transport (cdnistt) JWT claim.
        Additions to the Signed Token Transport namespace conform to the
        "Specification Required" policy as defined in <xref target="RFC5226"/>.</t>

        <t>The following table defines the initial Enforcement
        Information Elements:</t>
        <texttable>
          <ttcol align='left'>Value</ttcol>
          <ttcol align='left'>Description</ttcol>
          <ttcol align='left'>RFC</ttcol>

          <c>0</c>
          <c>Designates token transport is not enabled</c>
          <c>RFCthis</c>

          <c>1</c>
          <c>Designates token transport via cookie</c>
          <c>RFCthis</c>
        </texttable>

        <t>[RFC Editor: Please replace RFCthis with the published RFC
        number for this document.]</t>

        <t>[Ed Note: are there any special instructions to the
        designated expert reviewer?]</t>
      </section>

      <section anchor="ClaimsReg" title="JSON Web Token Claims Registration">

        <t>
          This specification registers the following Claims
          in the IANA "JSON Web Token Claims" registry
          <xref target="IANA.JWT.Claims"/>
          established by <xref target="RFC7519"/>.
        </t>

        <section anchor='ClaimsContents' title='Registry Contents'>

          <t>
            <?rfc subcompact="yes"?>
            <list style="symbols">
              <t>Claim Name: <spanx style="verb">cdniv</spanx></t>
              <t>Claim Description: CDNI Claim Set Version</t>
              <t>Change Controller: IESG</t>
              <t>Specification Document(s): <xref target="cdniv_claim"/> of [[ this specification ]]</t>
            </list>
          </t>
          <?rfc subcompact="no"?>

          <t>
            <?rfc subcompact="yes"?>
            <list style="symbols">
              <t>Claim Name: <spanx style="verb">cdnicrit</spanx></t>
              <t>Claim Description: CDNI Critical Claims Set</t>
              <t>Change Controller: IESG</t>
              <t>Specification Document(s): <xref target="cdnicrit_claim"/> of [[ this specification ]]</t>
            </list>
          </t>
          <?rfc subcompact="no"?>

          <t>
            <?rfc subcompact="yes"?>
            <list style="symbols">
              <t>Claim Name: <spanx style="verb">cdniip</spanx></t>
              <t>Claim Description: CDNI IP Address</t>
              <t>Change Controller: IESG</t>
              <t>Specification Document(s): <xref target="cdniip_claim"/> of [[ this specification ]]</t>
            </list>
          </t>
          <?rfc subcompact="no"?>

          <t>
            <?rfc subcompact="yes"?>
            <list style="symbols">
              <t>Claim Name: <spanx style="verb">cdniuc</spanx></t>
              <t>Claim Description: CDNI URI Container</t>
              <t>Change Controller: IESG</t>
              <t>Specification Document(s): <xref target="cdniuc_claim"/> of [[ this specification ]]</t>
            </list>
          </t>
          <?rfc subcompact="no"?>

          <t>
            <?rfc subcompact="yes"?>
            <list style="symbols">
              <t>Claim Name: <spanx style="verb">cdniets</spanx></t>
              <t>Claim Description: CDNI Expiration Time Setting for Signed Token Renewal</t>
              <t>Change Controller: IESG</t>
              <t>Specification Document(s): <xref target="cdniets_claim"/> of [[ this specification ]]</t>
            </list>
          </t>
          <?rfc subcompact="no"?>

          <t>
            <?rfc subcompact="yes"?>
            <list style="symbols">
              <t>Claim Name: <spanx style="verb">cdnistt</spanx></t>
              <t>Claim Description: CDNI Signed Token Transport Method for Signed Token Renewal</t>
              <t>Change Controller: IESG</t>
              <t>Specification Document(s): <xref target="cdnistt_claim"/> of [[ this specification ]]</t>
            </list>
          </t>
          <?rfc subcompact="no"?>

        </section>
      </section>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>This document describes the concept of URI Signing and how it can be
      used to provide access authorization in the case of
      CDNI. The primary goal of URI Signing is to make sure that only
      authorized UAs are able to access the content, with a
      CSP being able to authorize every individual request. It
      should be noted that URI Signing is not a content protection scheme; if
      a CSP wants to protect the content itself, other mechanisms, such as
      DRM, are more appropriate.</t>

      <t>In general, it holds that the level of protection against
      illegitimate access can be increased by including more claims
      in the signed JWT. The current version of this document
      includes claims for enforcing Issuer, Client IP Address, Not Before time, and Expiration Time,
      however this list can be extended with other, more complex, attributes
      that are able to provide some form of protection against some of the
      vulnerabilities highlighted below.</t>

      <t>That said, there are a number of aspects that limit the level of
      security offered by URI Signing and that anybody implementing URI
      Signing should be aware of.</t>

      <t><list style="symbols">
          <t>Replay attacks: A (valid) Signed URI may be used to perform
          replay attacks. The vulnerability to replay attacks can be reduced
          by picking a relatively short window between the Not Before time and Expiration Time
          attributes, although this is limited by the fact that any HTTP-based
          request needs a window of at least a couple of seconds to prevent
          a sudden network issues from preventing legitimate UAs access to
          the content. One may also reduce exposure to replay attacks by
          including a unique one-time access ID via the Nonce attribute (jti claim). Whenever the
          dCDN receives a request with a given unique ID, it
          adds that ID to the list of 'used' IDs. In the case an
          illegitimate UA tries to use the same URI through a replay attack,
          the dCDN can deny the request based on the already-used
          access ID.</t>

          <t>Illegitimate clients behind a NAT: In cases where there are
          multiple users behind the same NAT, all users will have the same IP
          address from the point of view of the dCDN. This results
          in the dCDN not being able to distinguish between the
          different users based on Client IP Address and illegitimate users
          being able to access the content. One way to reduce exposure to this
          kind of attack is to not only check for Client IP but also for other
          attributes, e.g., attributes that can be found in HTTP headers.</t>
        </list></t>

      <t>The shared key between CSP and uCDN may be distributed
      to dCDNs - including cascaded CDNs. Since this key can be used
      to legitimately sign a URL for content access authorization, it is
      important to know the implications of a compromised shared key.</t>

      <t>If a shared key usable for signing is compromised, an attacker
      can use it to perform a denial-of-service attack by forcing the CDN to
      evaluate prohibitively expensive regular expressions embedded in a
      cdniuc claim. As a result, compromised keys should be timely revoked
      in order to prevent exploitation.</t>
    </section>

    <section title="Privacy">
      <t>The privacy protection concerns described in <xref
      target="RFC7937">CDNI Logging Interface</xref> apply when
      the client's IP address (cdniip) is embedded in the Signed URI.
      For this reason, the mechanism described in <xref
      target="jwt_profile"/> encrypts the Client IP before
      including it in the URI Signing Package (and thus the URL itself).</t>
    </section>

    <section title="Acknowledgements">
      <t>The authors would like to thank the following people for their
      contributions in reviewing this document and providing feedback: Scott
      Leibrand, Kevin Ma, Ben Niven-Jenkins, Thierry Magnien, Dan York,
      Bhaskar Bhupalam, Matt Caulfield, Samuel Rajakumar, Iuniana Oprescu,
      Leif Hedstrom, Gancho Tenev, Brian Campbell, and Chris Lemmons.</t>
    </section>

    <section title="Contributors">
      <t>In addition, the authors would also like to make special mentions for certain
      people who contributed significant sections to this document.</t>

      <t><list style="symbols">
        <t>Matt Caulfield provided content for the CDNI Metadata Interface
        section.</t>
        <t>Emmanuel Thomas provided content for HTTP Adaptive Streaming.</t>
        <t>Matt Miller provided consultation on JWT usage as well as code to
        generate working JWT examples.</t>
      </list></t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.2119'?>

      <?rfc include='reference.RFC.8174'?>

      <?rfc include='reference.RFC.7937'?>

      <?rfc include='reference.RFC.7230'?>

      <?rfc include='reference.RFC.7159'?>

      <?rfc include='reference.RFC.7519'?>

      <?rfc include='reference.RFC.7516'?>

      <?rfc include='reference.RFC.8006'?>

      <?rfc include='reference.RFC.6920'?>

      <?rfc include='reference.RFC.5226'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.6707'?>

      <?rfc include='reference.RFC.3986'?>

      <?rfc include='reference.RFC.7336'?>

      <?rfc include='reference.RFC.7337'?>

      <?rfc include='reference.RFC.8008'?>

      <?rfc include='reference.RFC.7975'?>

      <?rfc include='reference.RFC.5952'?>

      <?rfc include='reference.RFC.6983'?>

      <?rfc include='reference.RFC.5905'?>

      <?rfc include='reference.RFC.7517'?>

      <?rfc include='reference.RFC.8216'?>

      <reference anchor="POSIX.1" target="http://pubs.opengroup.org/onlinepubs/9699919799/">
        <front>
          <title>The Open Group Base Specifications Issue 7</title>
          <author surname="IEEE"/>
          <date day="31" month="Jan" year="2018"/>
        </front>
        <seriesInfo name="IEEE Std" value="1003.1 2018 Edition"/>
      </reference>

      <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
        <front>
          <title>JSON Web Token Claims</title>
          <author>
            <organization>IANA</organization>
          </author>
          <date/>
        </front>
      </reference>

      <reference anchor="MPEG-DASH" target="http://www.iso.org/standard/65274.html">
        <front>
          <title>Information technology -- Dynamic adaptive streaming
          over HTTP (DASH) -- Part 1: Media presentation description
          and segment format</title>
          <author>
            <organization>ISO</organization>
          </author>
          <date month="05" year="2014"/>
        </front>
        <seriesInfo name="ISO/IEC" value="23009-1:2014"/>
        <seriesInfo name="Edition" value="2"/>
      </reference>

    </references>

    <section title="Signed URI Package Example" anchor="sup_example">
      <t>This section contains three examples of token usage: a simple example with only the
      required claim present, a complex example which demonstrates the full JWT claims set,
      including an encrypted Client IP (cdniip), and one that uses a Signed Token Renewal.</t>

      <t>Note: All of the examples have whitespace added to improve formatting and readability,
      but are not present in the generated content.</t>

      <t>All examples use the following JWK Set <xref target="RFC7517"/>:</t>
      <figure><artwork><![CDATA[
{ "keys": [
  {
    "kty": "EC",
    "kid": "P5UpOv0eMq1wcxLf7WxIg09JdSYGYFDOWkldueaImf0",
    "use": "sig",
    "alg": "ES256",
    "crv": "P-256",
    "x": "be807S4O7dzB6I4hTiCUvmxCI6FuxWba1xYBlLSSsZ8",
    "y": "rOGC4vI69g-WF9AGEVI37sNNwbjIzBxSjLvIL7f3RBA"
  },
  {
    "kty": "EC",
    "kid": "P5UpOv0eMq1wcxLf7WxIg09JdSYGYFDOWkldueaImf0",
    "use": "sig",
    "alg": "ES256",
    "crv": "P-256",
    "x": "be807S4O7dzB6I4hTiCUvmxCI6FuxWba1xYBlLSSsZ8",
    "y": "rOGC4vI69g-WF9AGEVI37sNNwbjIzBxSjLvIL7f3RBA",
    "d": "yaowezrCLTU6yIwUL5RQw67cHgvZeMTLVZXjUGb1A1M"
  },
  {
    "kty": "oct",
    "kid": "f-WbjxBC3dPuI3d24kP2hfvos7Qz688UTi6aB0hN998",
    "use": "enc",
    "alg": "A128GCM",
    "k": "4uFxxV7fhNmrtiah2d1fFg"
  }
]}
]]></artwork></figure>

     <t>Note: They are the public signing key, the private signing
     key, and the shared secret enctyption key, respectively. The public and private signing
     keys have the same fingerprint and only vary by the 'd' parameter that is missing from the
     public signing key.</t>

     <section title="Simple Example" anchor="simple_example">
        <t>
          This example is a simple common usage example containing
          a minimal subset of claims that the authors find most useful.
        </t>

        <t>
          The JWT Claim Set before signing:
        </t>

        <t>
          Note: "sha-256;2tderfWPa86Ku7YnzW51YUp7dGUjBS_3SW3ELx4hmWY" is the URL Segment form
          (<xref target="RFC6920"/> Section 5) of "http://cdni.example/foo/bar".
        </t>

        <figure><artwork><![CDATA[
{
  "exp": 1474243500,
  "iss": "uCDN Inc",
  "cdniuc": "hash:sha-256;2tderfWPa86Ku7YnzW51YUp7dGUjBS_3SW3ELx4hmWY"
}
]]></artwork></figure>

        <t>
          The signed JWT:
        </t>

        <figure><artwork><![CDATA[
eyJhbGciOiJFUzI1NiIsImtpZCI6IlA1VXBPdjBlTXExd2N4TGY3V3hJZzA5SmRTWU
dZRkRPV2tsZHVlYUltZjAifQ.eyJleHAiOjE0NzQyNDM1MDAsImlzcyI6InVDRE4gS
W5jIiwiY2RuaXVjIjoiaGFzaDpzaGEtMjU2OzJ0ZGVyZldQYTg2S3U3WW56VzUxWVV
wN2RHVWpCU18zU1czRUx4NGhtV1kifQ.T57uPHuAqd0szjjwbBCogswi0z62ZBOTFh
UfSSByyUqMBwPwG8CJugpPQ-8bsIKV2nOLGcWInZ3cxy591WBaTA
]]></artwork></figure>
      </section>

      <section title="Complex Example" anchor="complex_example">
        <t>
          This example uses all fields except for those dealing
          with Signed Token Renewal, including Client IP (cdniip) and Subject (sub) which are
          encrpyted. This significantly increases the size of the signed
          JWT token.
        </t>

        <t>
          JWE for Client IP (cdniip) of [2001:db8::1/32]:
        </t>

        <figure><artwork><![CDATA[
eyJhbGciOiJkaXIiLCJraWQiOiJmLVdianhCQzNkUHVJM2QyNGtQMmhmdm9zN1F6Nj
g4VVRpNmFCMGhOOTk4IiwiZW5jIjoiQTEyOEdDTSJ9..dqkehF7wJXHsngXV.GEx_K
SyryBD4zRRl_2Y30Q.8E3x5kQe3KWTlyX-5j9wPg
]]></artwork></figure>

        <t>
          JWE for Subject (sub) of "UserToken":
        </t>

        <figure><artwork><![CDATA[
eyJhbGciOiJkaXIiLCJraWQiOiJmLVdianhCQzNkUHVJM2QyNGtQMmhmdm9zN1F6Nj
g4VVRpNmFCMGhOOTk4IiwiZW5jIjoiQTEyOEdDTSJ9..7lWugCT6Rvx_gHwG.VeE2O
RPRhlQ6._FuExcqvOPP-2w-vS9m5XQ
]]></artwork></figure>

        <t>
          The JWT Claim Set before signing:
        </t>

        <figure><artwork><![CDATA[
{
  "aud": "dCDN LLC",
  "sub": "eyJhbGciOiJkaXIiLCJraWQiOiJmLVdianhCQzNkUHVJM2QyNGtQMmhm
dm9zN1F6Njg4VVRpNmFCMGhOOTk4IiwiZW5jIjoiQTEyOEdDTSJ9..7lWugCT6Rvx_
gHwG.VeE2ORPRhlQ6._FuExcqvOPP-2w-vS9m5XQ",
  "cdniip": "eyJhbGciOiJkaXIiLCJraWQiOiJmLVdianhCQzNkUHVJM2QyNGtQM
mhmdm9zN1F6Njg4VVRpNmFCMGhOOTk4IiwiZW5jIjoiQTEyOEdDTSJ9..dqkehF7wJ
XHsngXV.GEx_KSyryBD4zRRl_2Y30Q.8E3x5kQe3KWTlyX-5j9wPg",
  "cdniv": 1,
  "exp": 1474243500,
  "iat": 1474243200,
  "iss": "uCDN Inc",
  "jti": "5DAafLhZAfhsbe",
  "nbf": 1474243200,
  "cdniuc": "regex:http://cdni\\.example/foo/bar/[0-9]{3}\\.png"
}
]]></artwork></figure>

        <t>
          The signed JWT:
        </t>

        <figure><artwork><![CDATA[
eyJhbGciOiJFUzI1NiIsImtpZCI6IlA1VXBPdjBlTXExd2N4TGY3V3hJZzA5SmRTWU
dZRkRPV2tsZHVlYUltZjAifQ.eyJhdWQiOiJkQ0ROIExMQyIsInN1YiI6ImV5SmhiR
2NpT2lKa2FYSWlMQ0pyYVdRaU9pSm1MVmRpYW5oQ1F6TmtVSFZKTTJReU5HdFFNbWh
tZG05ek4xRjZOamc0VlZScE5tRkNNR2hPT1RrNElpd2laVzVqSWpvaVFURXlPRWREV
FNKOS4uN2xXdWdDVDZSdnhfZ0h3Ry5WZUUyT1JQUmhsUTYuX0Z1RXhjcXZPUFAtMnc
tdlM5bTVYUSIsImNkbmlpcCI6ImV5SmhiR2NpT2lKa2FYSWlMQ0pyYVdRaU9pSm1MV
mRpYW5oQ1F6TmtVSFZKTTJReU5HdFFNbWhtZG05ek4xRjZOamc0VlZScE5tRkNNR2h
PT1RrNElpd2laVzVqSWpvaVFURXlPRWREVFNKOS4uZHFrZWhGN3dKWEhzbmdYVi5HR
XhfS1N5cnlCRDR6UlJsXzJZMzBRLjhFM3g1a1FlM0tXVGx5WC01ajl3UGciLCJjZG5
pdiI6MSwiZXhwIjoxNDc0MjQzNTAwLCJpYXQiOjE0NzQyNDMyMDAsImlzcyI6InVDR
E4gSW5jIiwianRpIjoiNURBYWZMaFpBZmhzYmUiLCJuYmYiOjE0NzQyNDMyMDAsImN
kbml1YyI6InJlZ2V4Omh0dHA6Ly9jZG5pXFwuZXhhbXBsZS9mb28vYmFyL1swLTlde
zN9XFwucG5nIn0.2bXxaf1Hz9he1GcWC_bybOPL6ycygEgvT7JtP2BRsiGSzykEEIj
SWi9agE9vtuDsOzkbBGgd691XtjrjL-JO_g
]]></artwork></figure>

      </section>

      <section title="Signed Token Renewal Example" anchor="token_renewal_example">
        <t>
          This example uses fields for Signed Token Renewal.
        </t>

        <t>
          The JWT Claim Set before signing:
        </t>

        <figure><artwork><![CDATA[
{
  "cdniets": 30,
  "cdnistt": 1,
  "cdnistd": 2,
  "exp": 1474243500,
  "cdniuc": "regex:http://cdni\\.example/foo/bar/[0-9]{3}\\.ts"
}
]]></artwork></figure>

        <t>
          The signed JWT:
        </t>

        <figure><artwork><![CDATA[
eyJhbGciOiJFUzI1NiIsImtpZCI6IlA1VXBPdjBlTXExd2N4TGY3V3hJZzA5SmRTWU
dZRkRPV2tsZHVlYUltZjAifQ.eyJjZG5pZXRzIjozMCwiY2RuaXN0dCI6MSwiY2Rua
XN0ZCI6MiwiZXhwIjoxNDc0MjQzNTAwLCJjZG5pdWMiOiJyZWdleDpodHRwOi8vY2R
uaVxcLmV4YW1wbGUvZm9vL2Jhci9bMC05XXszfVxcLnRzIn0.sVMHF23EHdf0LWohl
hsxDQkoG3UzxX6M57TwE3yNGY4rv1c2iDMNDinERwnNuOwc6ExhictbQIhIuus5pcY
moQ
]]></artwork></figure>

        <t>
          Once the server validates the signed JWT it will return a
          new signed JWT with an updated expiry time (exp) as shown
          below. Note the expiry time is increased by the expiration
          time setting (cdniets) value.
        </t>

        <t>
          The JWT Claim Set before signing:
        </t>

        <figure><artwork><![CDATA[
{
  "cdniets": 30,
  "cdnistt": 1,
  "cdnistd": 2,
  "exp": 1474243530,
  "cdniuc": "regex:http://cdni\\.example/foo/bar/[0-9]{3}\\.ts"
}
]]></artwork></figure>

        <t>
          The signed JWT:
        </t>

        <figure><artwork><![CDATA[
eyJhbGciOiJFUzI1NiIsImtpZCI6IlA1VXBPdjBlTXExd2N4TGY3V3hJZzA5SmRTWU
dZRkRPV2tsZHVlYUltZjAifQ.eyJjZG5pZXRzIjozMCwiY2RuaXN0dCI6MSwiY2Rua
XN0ZCI6MiwiZXhwIjoxNDc0MjQzNTMwLCJjZG5pdWMiOiJyZWdleDpodHRwOi8vY2R
uaVxcLmV4YW1wbGUvZm9vL2Jhci9bMC05XXszfVxcLnRzIn0.2TQBd2k8szWERK8xw
1DWO-hqQhLfi0OF4N4aHvpQkbGRNhgloraOIMHDrfNH_YpOpufaeodLPGZCgkoIcGc
ckg
]]></artwork></figure>
      </section>
    </section>
  </back>
</rfc>
