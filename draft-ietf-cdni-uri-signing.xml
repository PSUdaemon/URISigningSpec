<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-ietf-cdni-uri-signing-10" ipr="trust200902">
  <front>
    <title abbrev="CDNI URI Signing">URI Signing for CDN Interconnection
    (CDNI)</title>

    <author fullname="Kent Leung" initials="K" surname="Leung">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street>3625 Cisco Way</street>

          <city>San Jose</city>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <phone>+1 408 526 5030</phone>

        <email>kleung@cisco.com</email>
      </address>
    </author>

    <author fullname="Francois Le Faucheur" initials="F. "
            surname="Le Faucheur">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street>Greenside, 400 Avenue de Roumanille</street>

          <city>Sophia Antipolis</city>

          <code>06410</code>

          <country>France</country>
        </postal>

        <phone>+33 4 97 23 26 19</phone>

        <email>flefauch@cisco.com</email>
      </address>
    </author>

    <author fullname="Ray van Brandenburg" initials="R"
            surname="van Brandenburg">
      <organization>TNO</organization>

      <address>
        <postal>
          <street>Anna van Buerenplein 1</street>

          <city>Den Haag</city>

          <region/>

          <code>2595DC</code>

          <country>the Netherlands</country>
        </postal>

        <phone>+31 88 866 7000</phone>

        <email>ray.vanbrandenburg@tno.nl</email>
      </address>
    </author>

    <author fullname="Bill Downey" initials="B" surname="Downey">
      <organization>Verizon Labs</organization>

      <address>
        <postal>
          <street>60 Sylvan Road</street>

          <city>Waltham</city>

          <region>Massachusetts</region>

          <code>02451</code>

          <country>USA</country>
        </postal>

        <phone>+1 781 466 2475</phone>

        <email>william.s.downey@verizon.com</email>
      </address>
    </author>

    <author fullname="Michel Fisher" initials="M" surname="Fisher">
      <organization>Limelight Networks</organization>

      <address>
        <postal>
          <street>222 S Mill Ave</street>

          <city>Tempe</city>

          <region>AZ</region>

          <code>85281</code>

          <country>USA</country>
        </postal>

        <phone>+1 360 419 5185</phone>

        <email>mfisher@llnw.com</email>
      </address>
    </author>

    <date day="" month="" year=""/>

    <workgroup>CDNI</workgroup>

    <abstract>
      <t>This document describes how the concept of URI signing supports the
      content access control requirements of CDNI and proposes a URI signing
      scheme as a <xref target="RFC7519">JSON Web Token (JWT)</xref> profile.</t>

      <t>The proposed URI signing method specifies the information needed to
      be included in the URI to transmit the signed JWT as well as the claims needed
      by the signed JWT to authorize a UA. The
      mechanism described can be used both in CDNI and single CDN
      scenarios.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>This document describes the concept of URI Signing and how it can be
      used to provide access authorization in the case of redirection between
      interconnected CDNs (CDNI) and between a Content Service Provider (CSP)
      and a CDN. The primary goal of URI Signing is to make sure that only
      authorized User Agents (UAs) are able to access the content, with a CSP
      being able to authorize every individual request. It should be noted
      that URI Signing is not a content protection scheme; if a CSP wants to
      protect the content itself, other mechanisms, such as DRM, are more
      appropriate. In addition to access control, URI Signing also has
      benefits in reducing the impact of denial-of-service attacks.</t>

      <t>The overall problem space for CDN Interconnection (CDNI) is described
      in <xref target="RFC6707">CDNI Problem Statement</xref>. In this
      document, along with the <xref target="RFC7337">CDNI Requirements</xref>
      document and the <xref target="RFC7336">CDNI Framework</xref> the need
      for interconnected CDNs to be able to implement an access control
      mechanism that enforces the CSP's distribution policy is described.</t>

      <t>Specifically, <xref target="RFC7336">CDNI Framework</xref>
      states:</t>

      <t>"The CSP may also trust the CDN operator to perform actions such as
      ..., and to enforce per-request authorization performed by the CSP using
      techniques such as URI signing."</t>

      <t>In particular, the following requirement is listed in <xref
      target="RFC7337">CDNI Requirements</xref>:</t>

      <t>"MI-16 [HIGH] The CDNI Metadata Distribution interface shall allow
      signaling of authorization checks and validation that are to be
      performed by the surrogate before delivery. For example, this could
      potentially include:</t>

      <t>* need to validate URI signed information (e.g., Expiry time, Client
      IP address)."</t>

      <t>This document proposes a URI Signing scheme that allows Surrogates in
      interconnected CDNs to enforce a per-request authorization performed by
      the CSP. Splitting the role of performing per-request authorization by
      CSP and the role of validation of this authorization by the CDN allows
      any arbitrary distribution policy to be enforced across CDNs without the
      need of CDNs to have any awareness of the actual CSP distribution
      policy.</t>

      <section title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119"/>.</t>

        <t>This document uses the terminology defined in <xref
        target="RFC6707">CDNI Problem Statement</xref>.</t>

        <t>This document also uses the terminology of <xref
        target="RFC7519">JSON Web Token (JWT)</xref>.</t>

        <t>In addition, the following terms are used throughout this
        document:</t>

        <t><list style="symbols">
            <t>Signed URI: A URI that contains a signed JWT for itself.<vspace blankLines="1"/></t>

            <t>Target CDN URI: Embedded URI created by the CSP to direct UA
            towards the Upstream CDN. The Target CDN URI can be signed by the
            CSP and verified by the Upstream CDN.<vspace blankLines="1"/></t>

            <t>Redirection URI: URI created by the Upstream CDN to redirect UA
            towards the Downstream CDN. The Redirection URI can be signed by
            the Upstream CDN and verified by the Downstream CDN. In a cascaded
            CDNI scenario, there can be more than one Redirection URI.<vspace blankLines="1"/></t>
          </list></t>
      </section>

      <section anchor="background"
               title="Background and overview on URI Signing ">
        <t>A CSP and CDN are assumed to have a trust relationship that enables
        the CSP to authorize access to a content item by including a set of
        claims in the form of a signed JWT in the URI before redirecting a UA to the CDN. Using these
        attributes, it is possible for a CDN to check an incoming content
        request to see whether it was authorized by the CSP (e.g., based on the
        UA's IP address or a time window). To prevent the UA from altering the claims
        a signed JWT is REQUIRED.</t>

        <t>Figure 1, shown below, presents an overview of the URI Signing
        mechanism in the case of a CSP with a single CDN. When the UA browses
        for content on CSP's website (#1), it receives HTML web pages with
        embedded content URIs. Upon requesting these URIs, the CSP redirects
        to a CDN, creating a Target CDN URI (#2) (alternatively, the Target
        CDN URI itself is embedded in the HTML). The Target CDN URI is the
        Signed URI which may include the IP address of the UA and/or a time
        window and always contains the signed JWT which is generated by the
        CSP using the shared secret or a private key. Once the UA receives the
        response with the embedded URI, it sends a new HTTP request using the
        embedded URI to the CDN (#3). Upon receiving the request, the CDN
        checks to see if the Signed URI is authentic by verifying the signed JWT.
        If applicable, it checks whether the IP address of the HTTP
        request matches that in the Signed URI and if the time window is still
        valid. After these claims are confirmed to be valid, the CDN delivers
        the content (#4).</t>

        <figure anchor="fig_single_cdn"
                title="Figure 1: URI Signing in a CDN Environment">
          <artwork>
                --------
               /        \
               |   CSP  |&lt; * * * * * * * * * * *
               \        /        Trust         *
                --------      relationship     *
                  ^  |                         *
                  |  |                         *
       1. Browse  |  | 2. Signed               *
            for   |  |    URI                  *
          content |  |                         *
                  |  v                         v
                +------+ 3. Signed URI     --------
                | User |-----------------&gt;/        \
                | Agent|                  |  CDN   |
                |      |&lt;-----------------\        /
                +------+ 4. Content        --------
                            Delivery
</artwork>
        </figure>
      </section>

      <section title="CDNI URI Signing Overview">
        <t>In a CDNI environment, URI Signing operates the same way in the
        initial steps #1 and #2 but the later steps involve multiple CDNs in
        the process of delivering the content. The main difference from the
        single CDN case is a redirection step between the Upstream CDN and the
        Downstream CDN. In step #3, UA may send HTTP request or DNS request.
        Depending on whether HTTP-based or DNS-based request routing is used,
        the Upstream CDN responds by directing the UA towards the Downstream
        CDN using either a Redirection URI (which is a Signed URI generated by
        the Upstream CDN) or a DNS reply, respectively (#4). Once the UA
        receives the response, it sends the Redirection URI/Target CDN URI to
        the Downstream CDN (#5). The received URI is validated by the
        Downstream CDN before delivering the content (#6). This is depicted in
        the figure below. Note: The CDNI call flows are covered in <xref
        target="operation">Detailed URI Signing Operation</xref>.</t>

        <figure title="Figure 2: URI Signing in a CDNI Environment">
          <artwork>
                                   +-------------------------+
                                   |Request Redirection Modes|
                                   +-------------------------+
                                   | a) HTTP                 |
                                   | b) DNS                  |
                                   +-------------------------+
                --------
               /        \&lt; * * * * * * * * * * * * * *
               |   CSP  |&lt; * * * * * * * * * * *     *
               \        /        Trust         *     *
                --------      relationship     *     *
                  ^  |                         *     *
                  |  | 2. Signed               *     *
       1. Browse  |  |    URI in               *     *
            for   |  |    HTML                 *     *
          content |  |                         *     *
                  |  v   3.a)Signed URI        v     *
                +------+   b)DNS request   --------  * Trust
                | User |-----------------&gt;/        \ * relationship
                | Agent|                  |  uCDN  | * (optional)
                |      |&lt;-----------------\        / *
                +------+ 4.a)Redirection URI-------  *
                  ^  |     b)DNS Reply         ^     *
                  |  |                         *     *
                  |  |      Trust relationship *     *
                  |  |                         *     *
      6. Content  |  | 5.a)Redirection URI     *     *
         delivery |  |   b)Signed URI(after    v     v
                  |  |     DNS exchange)      --------
                  |  +----------------------&gt;/        \ [May be
                  |                          |  dCDN  |  cascaded
                  +--------------------------\        /  CDNs]
                                              --------

             +-----------------------------------------+
             | Key |    Asymmetric   |    Symmetric    |
             +-----------------------------------------+
             |HTTP |Public key (uCDN)|Shared key (uCDN)|
             |DNS  |Public key (CSP) |Shared key (CSP) |
             +-----------------------------------------+
           </artwork>
        </figure>

        <t>The trust relationships between CSP, Upstream CDN, and Downstream
        CDN have direct implications for URI Signing. In the case shown in
        Figure 2, the CDN that the CSP has a trust relationship with is the
        Upstream CDN. The delivery of the content may be delegated to the
        Downstream CDN, which has a relationship with the Upstream CDN but may
        have no relationship with the CSP.</t>

        <t>In CDNI, there are two methods for request routing: DNS-based and
        HTTP-based. For DNS-based request routing, the Signed URI (i.e., Target
        CDN URI) provided by the CSP reaches the Downstream CDN directly. In
        the case where the Downstream CDN does not have a trust relationship
        with the CSP, this means that only an asymmetric public/private key
        method can be used for computing the signed JWT because the CSP and
        Downstream CDN are not able to exchange symmetric shared secret keys.
        Since the CSP is unlikely to have relationships with all the
        Downstream CDNs that are delegated to by the Upstream CDN, the CSP may
        choose to allow the Authoritative CDN to redistribute the shared key
        to a subset of their Downstream CDNs .</t>

        <t>For HTTP-based request routing, the Signed URI (i.e., Target CDN
        URI) provided by the CSP reaches the Upstream CDN. After this URI has
        been verified to be correct by the Upstream CDN, the Upstream CDN
        creates and signs a new Redirection URI to redirect the UA to the
        Downstream CDN. Since this new URI also has a new signed JWT, this
        new signature can be based around the trust relationship between the
        Upstream CDN and Downstream CDN, and the relationship between the
        Downstream CDN and CSP is not relevant. Given the fact that such a
        relationship between Upstream CDN and Downstream CDN always exists,
        both asymmetric public/private keys and symmetric shared secret keys
        can be used for URI Signing. Note that the signed Redirection URI MUST
        maintain the same, or higher, level of security as the original Signed
        URI.</t>
      </section>

      <section title="URI Signing in a non-CDNI context">
        <t>While the URI signing scheme defined in this document was primarily
        created for the purpose of allowing URI Signing in CDNI scenarios,
        e.g., between a uCDN and a dCDN or between a CSP and a dCDN, there is
        nothing in the defined URI Signing scheme that precludes it from being
        used in a non-CDNI context. As such, the described mechanism could be
        used in a single-CDN scenario such as shown in <xref
        target="fig_single_cdn"/> in <xref target="background"/>, for example
        to allow a CSP that uses different CDNs to only have to implement a
        single URI Signing mechanism.</t>
      </section>
    </section>

    <section anchor="jwt_profile" title="JWT Format and Processing Requirements">
      <t>The concept behind URI Signing is based on embedding in the Target
      CDN URI/Redirection URI a signed <xref target="RFC7519">JSON Web Token (JWT)
      </xref> that contains a number of claims that can be validated to ensure the
      UA has legitimate access to the content.</t>

      <t>In addition, this document specifies the following URI
      attribute:</t>

      <t>
        <list style="symbols">
          <t>URI Signing Package (URISigningPackage): The URI attribute that
          encapsulates all the URI Signing claims in a signed JWT encoded
          format. This attribute is exposed in the Signed URI as a URI
          query parameter or as a URL path parameter.</t>
        </list>
      </t>

      <t>The parameter name of the URI Signing Package Attribute shall be
      defined in the CDNI Metadata interface. If the CDNI Metadata interface
      is not used, or does not include a parameter name for the URI Signing
      Package Attribute, the parameter name is set by configuration (out of
      scope of this document).</t>

      <section anchor="jwt_claims" title="JWT Claims">
        <t>This section identifies the set of claims that may be
        needed to enforce the CSP distribution policy. New claims may be introduced in the future to extend the capabilities of
        the distribution policy.</t>

        <t>In order to provide flexibility in distribution policies to be
        enforced, the exact subset of claims used in the signed JWT of a given request is a deployment decision. The defined usage
        for each claim element is specified in parenthesis
        below.</t>

        <t>The following claims are used to enforce the
        distribution policy:</t>

        <t><list style="symbols">
            <t>URI Container (sub) [mandatory] - The semantics in <xref target="RFC7519"/> Section 4.1.2 MUST be followed.
            Container for holding the URI representation before the URI Signing Package is added. This representation can take one of several forms detailed in <xref target="uri_container_forms"/>.<vspace blankLines="1"/></t>

            <t>Expiry Time (exp) [optional] - The semantics in <xref target="RFC7519"/> Section 4.1.4 MUST be followed.
            Note: The time on the entities that generate and
            validate the signed URI SHOULD be in sync. In the CDNI case, this
            means that servers at both the CSP, uCDN and dCDN need to be
            time-synchronized. It is RECOMMENDED to use NTP for this.<vspace blankLines="1"/></t>

            <t>Client IP (aud) [optional] - The semantics in <xref target="RFC7519"/> Section 4.1.3 MUST be followed.
            IP address, or IP prefix, for
            which the Signed URI is valid. This is represented in CIDR
            notation, with dotted decimal format for IPv4 or canonical text
            representation for <xref target="RFC5952">IPv6 addresses</xref>.
            The request is rejected if sourced from a client outside of the
            specified IP range. Since the client IP is considered PII this field
            MUST be a JSON Web Encryption (<xref target="RFC7516">JWE</xref>)
            Object in compact serialization form.<vspace blankLines="1"/></t>

            <t>Nonce (jti) [optional] - The semantics in <xref target="RFC7519"/> Section 4.1.7 MUST be followed.
            Used to prevent replay attacks.<vspace blankLines="1"/></t>

        </list></t>

        <t>Note: See the <xref target="security">Security
        Considerations</xref> section on the limitations of using an
        expiration time and client IP address for distribution policy
        enforcement.</t>
        
        <section anchor="uri_container_forms" title="URI Container Forms">
          <t>The URI Container (sub) claim takes one of the following forms. More forms may be added in the future to extend the capabilities.</t>
          
          <section anchor="uri_container_forms_uri" title="URI Simple Container (uri:)">
              <t>When prefixed with 'uri:', the string following 'uri:' is the URI that MUST be matched with a simple string match to the requested URI.</t>
          </section>

          <section anchor="uri_container_forms_ptn" title="URI Pattern Container (uri-pattern:)">
              <t>When prefixed with 'uri-pattern:', the string following 'uri-pattern:' contains one or more patterns to match against the requested URI to check whether the requested content is allowed to be retrieved. Each URI Pattern follows the <xref target="RFC3986"/> URI format, including the '://' that delimits the URI scheme from the hierarchy part. The pattern may include the special literals:</t>
              
              <t>
                <list style="sybmols">
                  <t>';' - separates individual patterns when the string contains multiple URI patterns.<vspace blankLines="1"/></t>
                  <t>'*' - matches any sequence of characters, including the empty string.<vspace blankLines="1"/></t>
                  <t>'?' - matches exactly one character.<vspace blankLines="1"/></t>
                  <t>'$' - used to escape the special literals; MUST be followed by exactly one of ';', '*', '?', or '$'.<vspace blankLines="1"/></t>
                </list>
              </t>
              
              <t>The following is an example of a valid URI Pattern:</t>
              <t>
                <figure>
                  <artwork>
*://*/folder/content-83112371/quality_*/segment????.mp4
                  </artwork>
                </figure>
              </t>
              
              <t>An example of two concatenated URI Patterns is the following (whitespace is inserted after the ';' for readability and should not be present int the actual representation):</t>
              
              <t>
                <figure>
                  <artwork>
http://*/folder/content-83112371/manifest/*.xml;
http://*/folder/content-83112371/quality_*/segment????.mp4
                  </artwork>
                </figure>
              </t>
                
              <t>In order to increase performance of string parsing of the UPC, implementations can check often-used UPC prefixes to quickly check whether certain URI components can be ignored. For example, UPC prefixes '*://*/' or '*://*:*' will be used in case the scheme and authority components of the URI are ignored for purposes of UPC enforcement.</t>
          </section>

          <section anchor="uri_container_forms_regex" title="URI Regular Expression Container (uri-regex:)">
              <t>URI Regular Expression - Prefixed with 'uri-regex:', this string
              is any <xref target="PCRE839">PCRE</xref> compatible regular expression
              used to match against the requested URI.</t>
              
              <t>An example of a 'uri-regex:' is the following:</t>
              <t>
                <figure>
                  <artwork>TBD</artwork>
                </figure>
              </t>
              
              <t>Note: Due to computation complexity of executing arbitrary regular
              expressions, it is RECOMMENDED to only execute after validating the
              JWT to ensure it's authenticity.</t>
          </section>
        </section>
      </section>
    </section>

    <section anchor="cdni_interfaces"
             title="Relationship with CDNI Interfaces">
      <t>Some of the CDNI Interfaces need enhancements to support URI Signing.
      As an example: A Downstream CDN that supports URI Signing needs to be
      able to advertise this capability to the Upstream CDN. The Upstream CDN
      needs to select a Downstream CDN based on such capability when the CSP
      requires access control to enforce its distribution policy via URI
      Signing. Also, the Upstream CDN needs to be able to distribute via the
      CDNI Metadata interface the information necessary to allow the
      Downstream CDN to validate a Signed URI. Events that pertain to URI
      Signing (e.g., request denial or delivery after access authorization)
      need to be included in the logs communicated through the CDNI Logging
      interface (Editor's Note: Is this within the scope of the CDNI Logging
      interface?).</t>

      <section anchor="control" title="CDNI Control Interface">
        <t>URI Signing has no impact on this interface.</t>
      </section>

      <section anchor="advertisement"
               title="CDNI Footprint &amp; Capabilities Advertisement Interface">
        <t>The Downstream CDN advertises its capability to support URI Signing
        via the CDNI Footprint &amp; Capabilities Advertisement interface
        (FCI).</t>

        <t>In general, new information elements introduced to enhance URI
        Signing requires a draft and a new version.</t>

        <t><list>
            <t>For Enforcement Information Elements, there is no need to
            advertise the based information elements such as "CIP" and
            "ET".</t>

            <t>For Signature Computation Information Elements:<list>
                <t>No need to advertise "VER" Information Element unless it's
                not "1". In this case, a draft is needed to describe the new
                version.</t>

                <t>Advertise value of the "HF" Information Element (i.e.
                SHA-256) to indicate support for the hash function; Need IANA
                assignment for new hash function.</t>

                <t>Advertise value of the "DSA" Information Element (i.e.
                "ECDSA") to indicate support for the DSA; Need IANA assignment
                for new digital signature algorithm.</t>

                <t>Advertise "MD" Information Element (i.e., SHA-256) to
                indicate support for symmetric key method; A new draft is
                needed for an alternative method.</t>

                <t>Advertise "DS" Information Element (i.e., "ECDSA") to
                indicate support for asymmetric key method; A new draft is
                needed for an alternative method.</t>
              </list></t>

            <t>For URI Signing Package Attribute, there is no need to
            advertise the base attribute.</t>
          </list></t>
      </section>

      <section anchor="redirection"
               title="CDNI Request Routing Redirection Interface">
        <t>The <xref target="I-D.ietf-cdni-redirection">CDNI Request Routing
        Redirection Interface</xref> describes the recursive request
        redirection method. For URI Signing, the Upstream CDN signs the URI
        provided by the Downstream CDN. This approach has the following
        benefits:<list>
            <t>Consistency with interative request routing method</t>

            <t>URI Signing is fully operational even when Downstream CDN does
            not have the signing function (which may be the case when the
            Downstream CDN operates only as a delivering CDN)</t>

            <t>Upstream CDN can act as a conversion gateway for the requesting
            routing interface between Upstream CDN and CSP and request routing
            interface between Upstream CDN and Downstream CDN since these two
            interfaces may not be the same</t>
          </list></t>
      </section>

      <section anchor="metadata" title="CDNI Metadata Interface">
        <t>The <xref target="I-D.ietf-cdni-metadata">CDNI Metadata
        Interface</xref> describes the CDNI metadata distribution in order to
        enable content acquisition and delivery. For URI Signing, additional
        CDNI metadata objects are specified. In general, an Empty set means
        "all". These are the CDNI metadata objects used for URI Signing.</t>

        <t>The UriSigning Metadata object contains information to enable URI
        signing and validation by a dCDN. The UriSigning properties are
        defined below.</t>

        <t><list style="empty">
            <t>Property: enforce<list style="empty">
                <t>Description: URI Signing enforcement flag. Specifically,
                this flag indicates if the access to content is subject to URI
                Signing. URI Signing requires the Downstream CDN to ensure
                that the URI must be signed and validated before content
                delivery. Otherwise, Downstream CDN does not perform
                validation regardless if URI is signed or not.</t>

                <t>Type: Boolean</t>

                <t>Mandatory-to-Specify: No. If a UriSigning object is present
                in the metadata for a piece of content (even if the object is
                empty), then URI signing should be enforced. If no UriSigning
                object is present in the metadata for a piece of content, then
                the signed JWT should not be validated.</t>
              </list></t>

            <t>Property: key-id<list style="empty">
                <t>Description: Designated key identifier used for URI Signing
                computation when the Signed URI does not contain the Key ID
                information element.</t>

                <t>Type: String</t>

                <t>Mandatory-to-Specify: No. A Key ID is not essential for all
                implementations of URI signing.</t>
              </list></t>

            <t>Property: key-id-set<list style="empty">
                <t>Description: Allowable Key ID set that the Signed URI's Key
                ID information element can reference.</t>

                <t>Type: List of Strings</t>

                <t>Mandatory-to-Specify: No. Default is to allow any Key
                ID.</t>
              </list></t>

            <t>Property: hash-function<list style="empty">
                <t>Description: Designated hash function used for URI Signing
                computation when the Signed URI does not contain the Hash
                Function information element.</t>

                <t>Type: String (limited to the hash function strings in the
                registry defined by the <xref target="sec.IANA">IANA
                Considerations</xref> section)</t>

                <t>Mandatory-to-Specify: No. Default is SHA-256.</t>
              </list></t>

            <t>Property: hash-function-set<list style="empty">
                <t>Description: Allowable Hash Function set that the Signed
                URI's Hash Function information element can reference.</t>

                <t>Type: List of Strings</t>

                <t>Mandatory-to-Specify: No. Default is to allow any hash
                function.</t>
              </list></t>

            <t>Property: digital-signature-algorithm<list style="empty">
                <t>Description: Designated digital signature function used for
                URI Signing computation when the Signed URI does not contain
                the Digital Signature Algorithm information element.</t>

                <t>Type: String (limited to the digital signature algorithm
                strings in the registry defined by the <xref
                target="sec.IANA">IANA Considerations</xref> section).</t>

                <t>Mandatory-to-Specify: No. Default is "ECDSA".</t>
              </list></t>

            <t>Property: digital-signature-algorithm-set<list style="empty">
                <t>Description: Allowable digital signature function set that
                the Signed URI's Digital Signature Algorithm information
                element can reference.</t>

                <t>Type: List of Strings</t>

                <t>Mandatory-to-Specify: No. Default is to allow any DSA.</t>
              </list></t>

            <t>Property: package-attribute<list style="empty">
                <t>Description: Overwrite the default name for the URL Signing
                Package Attribute.</t>

                <t>Type: String</t>

                <t>Mandatory-to-Specify: No. Default is
                "URISigningPackage".</t>
              </list></t>
          </list></t>

        <t>Note that the Key ID information element is not needed if only one
        key is provided by the CSP or the Upstream CDN for the content item or
        set of content items covered by the CDNI Metadata object. In the case
        of asymmetric keys, it's easy for any entity to sign the URI for
        content with a private key and provide the public key in the Signed
        URI. This just confirms that the URI Signer authorized the delivery.
        But it's necessary for the URI Signer to be the content owner. So, the
        CDNI Metadata interface or configuration MUST provide the allowable
        Key ID set to authorize the Key ID information element embedded in the
          Signed URI.</t>
        
        <t>The following is an example of a URI Signing metadata payload with all default values:</t>
        
        <figure>
          <artwork><![CDATA[

{
  "generic-metadata-type": "MI.UriSigning.v1"
  "generic-metadata-value": {}
}
]]>
          </artwork>
        </figure>
        
        <t>The following is an example of a URI Signing metadata payload with explicit values:</t>
        
        <figure>
          <artwork><![CDATA[

{
  "generic-metadata-type": "MI.UriSigning.v1"
  "generic-metadata-value":
    {
      "enforce": true,
      "key-id": "1",
      "key-id-set": ["1", "2", "3"],
      "hash-function": "SHA-512",
      "hash-function-set": ["SHA-384", "SHA-512"],
      "digital-signature-algorithm": "ECDSA",
      "digital-signature-algorithm-set": ["ECDSA"],
      "package-attribute": "usp"
    }
}
]]>
          </artwork>
        </figure>

      </section>

      <section anchor="logging" title="CDNI Logging Interface">
        <t>For URI Signing, the Downstream CDN reports that enforcement of the
        access control was applied to the request for content delivery. When
        the request is denied due to enforcement of URI Signing, the reason is
        logged.</t>

        <t>The following CDNI Logging field for URI Signing SHOULD be
        supported in the HTTP Request Logging Record as specified in <xref
        target="I-D.ietf-cdni-logging">CDNI Logging Interface</xref>.</t>

        <t><list style="symbols">
            <t>s-uri-signing (mandatory): <list>
                <t>format: 3DIGIT</t>

                <t>field value: this characterises the URI signing validation
                performed by the Surrogate on the request. The allowed values
                are:<list>
                    <t>"000" : no signed JWT validation performed</t>

                    <t>"200" : signed JWT validation performed and
                    validated</t>

                    <t>"400" : signed JWT validation performed and rejected
                    because of incorrect signature</t>

                    <t>"401" : signed JWT validation performed and rejected
                    because of Expiration Time enforcement</t>

                    <t>"402" : signed JWT validation performed and rejected
                    because of Client IP enforcement</t>

                    <t>"403" : signed JWT validation performed and rejected
                    because of URI Pattern enforcement</t>

                    <t>"500" : unable to perform signed JWT validation
                    because of malformed URI</t>
                  </list></t>

                <t>occurrence: there MUST be zero or exactly one instance of
                this field.</t>
              </list></t>

            <t>s-uri-signing-deny-reason (optional): <list>
                <t>format: QSTRING</t>

                <t>field value: a string for providing further information in
                case the signed JWT was rejected, e.g., for debugging
                purposes.</t>

                <t>occurrence: there MUST be zero or exactly one instance of
                this field.</t>
              </list></t>
          </list></t>
      </section>
    </section>

    <section anchor="operation" title="URI Signing Message Flow">
      <t>URI Signing supports both HTTP-based and DNS-based request routing.
      <xref target="RFC7519">JSON Web Token (JWT)</xref> defines a
      compact, URL-safe means of representing
      claims to be transferred between two parties.  The claims in a signed JWT
      are encoded as a JSON object that is used as the payload of a JSON
      Web Signature (JWS) structure or as the plaintext of a JSON Web
      Encryption (JWE) structure, enabling the claims to be digitally
      signed or integrity protected with a Message Authentication Code
      (MAC) and/or encrypted.</t>

      <section anchor="http" title="HTTP Redirection">
        <t>For HTTP-based request routing, HMAC is applied to a set of
        information that is unique to a given end user content request using
        key information that is specific to a pair of adjacent CDNI hops (e.g.
        between the CSP and the Authoritative CDN, between the Authoritative
        CDN and a Downstream CDN). This allows a CDNI hop to ascertain the
        authenticity of a given request received from a previous CDNI hop.</t>

        <t>The URI signing scheme described below is based on the following
        steps (assuming HTTP redirection, iterative request routing and a CDN
        path with two CDNs). Note that Authoritative CDN and Upstream CDN are
        used exchangeably.</t>

        <figure title="Figure 3: HTTP-based Request Routing with URI Signing">
          <artwork>
     End-User           dCDN                 uCDN                 CSP
     |                    |                    |                    |
     |            1.CDNI FCI interface used to |                    |
     |         advertise URI Signing capability|                    |
     |                    |-------------------&gt;|                    |
     |                    |                    |                    |
     |              2.Provides information to validate signed JWT   |
     |                    |                    |&lt;-------------------|
     |                    |                    |                    |
     |        3.CDNI Metadata interface used to|                    |
     |           provide URI Signing attributes|                    |
     |                    |&lt;-------------------|                    |
     |4.Authorization request                  |                    |
     |-------------------------------------------------------------&gt;|
     |                    |                    |  [Apply distribution
     |                    |                    |   policy]          |
     |                    |                    |                    |
     |                    |             (ALT: Authorization decision)
     |5.Request is denied |                    |      &lt;Negative&gt;    |
     |&lt;-------------------------------------------------------------|
     |                    |                    |                    |
     |6.CSP provides signed URI                |      &lt;Positive&gt;    |
     |&lt;-------------------------------------------------------------|
     |                    |                    |                    |
     |7.Content request   |                    |                    |
     |----------------------------------------&gt;| [Validate URI      |
     |                    |                    |  signature]        |
     |                    |                    |                    |
     |                    |    (ALT: Validation result)             |
     |8.Request is denied |          &lt;Negative&gt;|                    |
     |&lt;----------------------------------------|                    |
     |                    |                    |                    |
     |9.Re-sign URI and redirect to  &lt;Positive&gt;|                    |
     |  dCDN (newly signed URI)                |                    |
     |&lt;----------------------------------------|                    |
     |                    |                    |                    |
     |10.Content request  |                    |                    |
     |-------------------&gt;| [Validate URI      |                    |
     |                    |  signature]        |                    |
     |                    |                    |                    |
     |    (ALT: Validation result)             |                    |
     |11.Request is denied| &lt;Negative&gt;         |                    |
     |&lt;-------------------|                    |                    |
     |                    |                    |                    |
     |12.Content delivery | &lt;Positive&gt;         |                    |
     |&lt;-------------------|                    |                    |
     :                    :                    :                    :
     :   (Later in time)  :                    :                    :
     |13.CDNI Logging interface to include URI Signing information  |
     |                    |-------------------&gt;|                    |</artwork>
        </figure>

        <t><list style="numbers">
            <t>Using the CDNI Footprint &amp; Capabilities Advertisement
            interface, the Downstream CDN advertises its capabilities
            including URI Signing support to the Authoritative CDN.</t>

            <t>CSP provides to the Authoritative CDN the information needed to
            validate signed JWTs from that CSP. For example, this
            information may include a hashing function, algorithm, and a key
            value.</t>

            <t>Using the CDNI Metadata interface, the Authoritative CDN
            communicates to a Downstream CDN the information needed to
            validate signed JWTs from the Authoritative CDN for the given
            CSP. For example, this information may include the URI query
            string parameter name for the URI Signing Package Attribute, a
            hashing algorithm and/or a key corresponding to the trust
            relationship between the Authoritative CDN and the Downstream
            CDN.</t>

            <t>When a UA requests a piece of protected content from the CSP,
            the CSP makes a specific authorization decision for this unique
            request based on its arbitrary distribution policy</t>

            <t>If the authorization decision is negative, the CSP rejects the
            request.</t>

            <t>If the authorization decision is positive, the CSP computes a
            Signed URI that is based on unique parameters of that request and
            conveys it to the end user as the URI to use to request the
            content.</t>

            <t>On receipt of the corresponding content request, the
            authoritative CDN validates the signed JWT in the URI using the
            information provided by the CSP.</t>

            <t>If the validation is negative, the authoritative CDN rejects
            the request</t>

            <t>If the validation is positive, the authoritative CDN computes a
            Signed URI that is based on unique parameters of that request and
            provides to the end user as the URI to use to further request the
            content from the Downstream CDN</t>

            <t>On receipt of the corresponding content request, the Downstream
            CDN validates the signed JWT in the Signed URI using the
            information provided by the Authoritative CDN in the CDNI
            Metadata</t>

            <t>If the validation is negative, the Downstream CDN rejects the
            request and sends an error code (e.g., 403) in the HTTP
            response.</t>

            <t>If the validation is positive, the Downstream CDN serves the
            request and delivers the content.</t>

            <t>At a later time, Downstream CDN reports logging events that
            includes URI signing information.</t>
          </list></t>

        <t>With HTTP-based request routing, URI Signing matches well the
        general chain of trust model of CDNI both with symmetric key and
        asymmetric keys because the key information only need to be specific
        to a pair of adjacent CDNI hops.</t>
      </section>

      <section anchor="dns" title="DNS Redirection">
        <t>For DNS-based request routing, the CSP and Authoritative CDN must
        agree on a trust model appropriate to the security requirements of the
        CSP's particular content. Use of asymmetric public/private keys allows
        for unlimited distribution of the public key to Downstream CDNs.
        However, if a shared secret key is preferred, then the CSP may want to
        restrict the distribution of the key to a (possibly empty) subset of
        trusted Downstream CDNs. Authorized Delivery CDNs need to obtain the
        key information to validate the Signed UR, which is computed by the
        CSP based on its distribution policy.</t>

        <t>The URI signing scheme described below is based on the following
        steps (assuming iterative DNS request routing and a CDN path with two
        CDNs). Note that Authoritative CDN and Upstream CDN are used
        exchangeably.</t>

        <figure title="Figure 4: DNS-based Request Routing with URI Signing">
          <artwork>
     End-User            dCDN                 uCDN                CSP
     |                    |                    |                    |
     |            1.CDNI FCI interface used to |                    |
     |         advertise URI Signing capability|                    |
     |                    |-------------------&gt;|                    |
     |                    |                    |                    |
     |              2.Provides information to validate signed JWT   |
     |                    |                    |&lt;-------------------|
     |        3.CDNI Metadata interface used to|                    |
     |           provide URI Signing attributes|                    |
     |                    |&lt;-------------------|                    |
     |4.Authorization request                  |                    |
     |-------------------------------------------------------------&gt;|
     |                    |                    |  [Apply distribution
     |                    |                    |   policy]          |
     |                    |                    |                    |
     |                    |             (ALT: Authorization decision)
     |5.Request is denied |                    |      &lt;Negative&gt;    |
     |&lt;-------------------------------------------------------------|
     |                    |                    |                    |
     |6.Provides signed URI                    |      &lt;Positive&gt;    |
     |&lt;-------------------------------------------------------------|
     |                    |                    |                    |
     |7.DNS request       |                    |                    |
     |----------------------------------------&gt;|                    |
     |                    |                    |                    |
     |8.Redirect DNS to dCDN                   |                    |
     |&lt;----------------------------------------|                    |
     |                    |                    |                    |
     |9.DNS request       |                    |                    |
     |-------------------&gt;|                    |                    |
     |                    |                    |                    |
     |10.IP address of Surrogate               |                    |
     |&lt;-------------------|                    |                    |
     |                    |                    |                    |
     |11.Content request  |                    |                    |
     |-------------------&gt;| [Validate URI      |                    |
     |                    |  signature]        |                    |
     |                    |                    |                    |
     |    (ALT: Validation result)             |                    |
     |12.Request is denied| &lt;Negative&gt;         |                    |
     |&lt;-------------------|                    |                    |
     |                    |                    |                    |
     |13.Content delivery | &lt;Positive&gt;         |                    |
     |&lt;-------------------|                    |                    |
     :                    :                    :                    :
     :   (Later in time)  :                    :                    :
     |14.CDNI Logging interface to report URI Signing information   |
     |                    |-------------------&gt;|                    |
</artwork>
        </figure>

        <t><list style="numbers">
            <t>Using the CDNI Footprint &amp; Capabilities Advertisement
            interface, the Downstream CDN advertises its capabilities
            including URI Signing support to the Authoritative CDN.</t>

            <t>CSP provides to the Authoritative CDN the information needed to
            validate cryptographic signatures from that CSP. For example, this
            information may include a hash function, algorithm, and a key.</t>

            <t>Using the CDNI Metadata interface, the Authoritative CDN
            communicates to a Downstream CDN the information needed to
            validate cryptographic signatures from the CSP (e.g., the URI query
            string parameter name for the URI Signing Package Attribute). In
            the case of symmetric key, the Authoritative CDN checks if the
            Downstream CDN is allowed by CSP to obtain the shared secret
            key.</t>

            <t>When a UA requests a piece of protected content from the CSP,
            the CSP makes a specific authorization decision for this unique
            request based on its arbitrary distribution policy.</t>

            <t>If the authorization decision is negative, the CSP rejects the
            request</t>

            <t>If the authorization decision is positive, the CSP computes a
            cryptographic signature that is based on unique parameters of that
            request and includes it in the URI provided to the end user to
            request the content.</t>

            <t>End user sends DNS request to the authoritative CDN.</t>

            <t>On receipt of the DNS request, the authoritative CDN redirects
            the request to the Downstream CDN.</t>

            <t>End user sends DNS request to the Downstream CDN.</t>

            <t>On receipt of the DNS request, the Downstream CDN responds with
            IP address of one of its Surrogates.</t>

            <t>On receipt of the corresponding content request, the Downstream
            CDN validates the cryptographic signature in the URI using the
            information provided by the Authoritative CDN in the CDNI
            Metadata</t>

            <t>If the validation is negative, the Downstream CDN rejects the
            request and sends an error code (e.g., 403) in the HTTP
            response.</t>

            <t>If the validation is positive, the Downstream CDN serves the
            request and delivers the content.</t>

            <t>At a later time, Downstream CDN reports logging events that
            includes URI signing information.</t>
          </list></t>

        <t>With DNS-based request routing, URI Signing matches well the
        general chain of trust model of CDNI when used with asymmetric keys
        because the only key information that need to be distributed across
        multiple CDNI hops including non-adjacent hops is the public key, that
        is generally not confidential.</t>

        <t>With DNS-based request routing, URI Signing does not match well the
        general chain of trust model of CDNI when used with symmetric keys
        because the symmetric key information needs to be distributed across
        multiple CDNI hops including non-adjacent hops. This raises a security
        concern for applicability of URI Signing with symmetric keys in case
        of DNS-based inter-CDN request routing.</t>
      </section>
    </section>

    <section title="HTTP Adaptive Streaming">
      <t>The authors note that in order to perform URI signing for individual
      content segments of HTTP Adaptive Bitrate content, specific URI signing
      mechanisms are needed. Such mechanisms are currently out-of-scope of
      this document. More details on this topic is covered in <xref
      target="RFC6983">Models for HTTP-Adaptive-Streaming-Aware CDNI</xref>. In addition, 
      <xref target="I-D.brandenburg-cdni-uri-signing-for-has"/> provides an extension to the algorithm defined in this document that deals specifically with URI signing of segmented content.</t>
    </section>

    <section anchor="sec.IANA" title="IANA Considerations">
      <section anchor="sec.IANA.payload" title="CDNI Payload Type">

        <t>This document requests the registration of the following CDNI
        Payload Type under the IANA "CDNI Payload Type" registry:</t>

        <texttable>
          <ttcol align="left">Payload Type</ttcol>
          <ttcol align="left">Specification</ttcol>

          <c>MI.UriSigning.v1</c>
          <c>RFCthis</c>
        </texttable>

        <t>[RFC Editor: Please replace RFCthis with the published RFC
        number for this document.]</t>

        <section anchor="sec.IANA.payload.UriSigning" title="CDNI UriSigning Payload Type">
          <t>Purpose: The purpose of this payload type is to distinguish
          UriSigning MI objects (and any associated capability advertisement).</t>
          <t>Interface: MI/FCI</t>
          <t>Encoding: see <xref target="metadata"/></t>

        </section>

      </section>

      <section anchor="sec.IANA.logging_record" title="CDNI Logging Record Type">
        <t>This document requests the registration of the following CDNI
        Logging record-type under the IANA "CDNI Logging record-types" registry:</t>

        <texttable>
          <ttcol align="left">record-types</ttcol>
          <ttcol align="left">Reference</ttcol>
          <ttcol align="left">Description</ttcol>

          <c>cdni_http_request_v2</c>
          <c>RFCthis</c>
          <c>Extension to CDNI Logging Record version 1 for content
          delivery using HTTP, to include URI Signing logging fields</c>
        </texttable>

        <t>[RFC Editor: Please replace RFCthis with the published RFC
        number for this document.]</t>

        <section anchor="sec.IANA.record_type.cdni_http_request_v2"
                 title="CDNI Logging Record Version 2 for HTTP">
          <t>The "cdni_http_request_v2" record-type supports all of
          the fields supported by the "cdni_http_request_v1"
          record-type <xref target="I-D.ietf-cdni-logging"/> plus the
          two additional fields "s-uri-signing" and
          "s-uri-signing-deny-reason", registered by this document in
          <xref target="sec.IANA.fields"/>.  The name,
          format, field value, and occurence information for the two
          new fields can be found in
          <xref target="logging"/> of this
          document.</t>

        </section>

      </section>

      <section anchor="sec.IANA.fields" title="CDNI Logging Field Names">

        <t>This document requests the registration of the following CDNI
        Logging fields under the IANA "CDNI Logging Field Names" registry:</t>

        <texttable>
          <ttcol align="left">Field Name</ttcol>
          <ttcol align="left">Reference</ttcol>

          <c>s-uri-signing</c>
          <c>RFCthis</c>

          <c>s-uri-signing-deny-reason</c>
          <c>RFCthis</c>
        </texttable>
        
        <t>[RFC Editor: Please replace RFCthis with the published RFC
        number for this document.]</t>

      </section>
      
      <section anchor="sec.IANA.auth" title="CDNI Metadata Auth Type">

        <t>This document requests the registration of the following CDNI
        Metadata Auth type under the IANA "CDNI Metadata Auth Types" registry:</t>

        <texttable>
          <ttcol align="left">Auth type</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">Specification</ttcol>

          <c>MI.UriSigning.v1</c>
          <c>URI Signing version 1</c>
          <c>RFCthis</c>
        </texttable>
        
        <t>[RFC Editor: Please replace RFCthis with the published RFC
        number for this document.]</t>

      </section>

      <section anchor="sec.IANA.enforcement_ie"
               title="CDNI URI Signing Enforcement Information Elements">
        <t>The IANA is requested to create a new "CDNI URI Signing
        Enforcement Information Elements" subregistry in the "Content
        Delivery Networks Interconnection (CDNI) Parameters" registry.
        The "CDNI URI Signing Enforcement Information Elements"
        namespace defines the valid Enforcement Information Elements
        that may be included in a URI Signing token.  Additions to the
        Enforcement Information Elements namespace conform to the 
        "Specification Required" policy as defined in <xref target="RFC5226"/>.</t>

        <t>The following table defines the initial Enforcement
        Information Elements:</t>
        <texttable>
          <ttcol align='left'>Element</ttcol>
          <ttcol align='left'>Description</ttcol>
          <ttcol align='left'>RFC</ttcol>

          <c>ET</c>
          <c>Expiry Time</c>
          <c>RFCthis</c>

          <c>CIP</c>
          <c>Client IP Address</c>
          <c>RFCthis</c>

          <c>OUC</c>
          <c>Original URI Container</c>
          <c>RFCthis</c>

          <c>URI Pattern Container</c>
          <c>Client IP Address</c>
          <c>RFCthis</c>
        </texttable>

        <t>[RFC Editor: Please replace RFCthis with the published RFC
        number for this document.]</t>

        <t>[Ed Note: are there any special instructions to the
        designated expert reviewer?]</t>
      </section>

      <section anchor="sec.IANA.computation_ie"
               title="CDNI URI Signing Signature Computation Information Elements">
        <t>The IANA is requested to create a new "CDNI URI Signing
        Signature Computation Information Elements" subregistry in the "Content
        Delivery Networks Interconnection (CDNI) Parameters" registry.
        The "CDNI URI Signing Signature Computation Information Elements"
        namespace defines the valid Signature Computation Information Elements
        that may be included in a URI Signing token.  Additions to the
        Signature Computation Information Elements namespace conform to the 
        "Specification Required" policy as defined in <xref target="RFC5226"/>.</t>

        <t>The following table defines the initial Signature Computation
        Information Elements:</t>
        <texttable>
          <ttcol align='left'>Element</ttcol>
          <ttcol align='left'>Description</ttcol>
          <ttcol align='left'>RFC</ttcol>

          <c>VER</c>
          <c>Version Number</c>
          <c>RFCthis</c>

          <c>KID</c>
          <c>Non-numerical Key Identifier</c>
          <c>RFCthis</c>

          <c>KID_NUM</c>
          <c>Numerical Key Identifier</c>
          <c>RFCthis</c>

          <c>HF</c>
          <c>Hash Function</c>
          <c>RFCthis</c>

          <c>DSA</c>
          <c>Digital Signature Algorithm</c>
          <c>RFCthis</c>

          <c>CEA</c>
          <c>Client IP Encryption Algorithm</c>
          <c>RFCthis</c>

          <c>CKI</c>
          <c>Client IP Encryption Key Identifier</c>
          <c>RFCthis</c>
        </texttable>

        <t>[RFC Editor: Please replace RFCthis with the published RFC
        number for this document.]</t>

        <t>[Ed Note: are there any special instructions to the
        designated expert reviewer?]</t>
      </section>

      <section anchor="sec.IANA.signature_ie"
               title="CDNI URI Signing Signature Information Elements">
        <t>The IANA is requested to create a new "CDNI URI Signing
        Signature Information Elements" subregistry in the "Content
        Delivery Networks Interconnection (CDNI) Parameters" registry.
        The "CDNI URI Signing Signature Information Elements"
        namespace defines the valid Signature Information Elements
        that may be included in a URI Signing token.  Additions to the
        Signature Information Elements namespace conform to the 
        "Specification Required" policy as defined in <xref target="RFC5226"/>.</t>

        <t>The following table defines the initial Signature
        Information Elements:</t>
        <texttable>
          <ttcol align='left'>Element</ttcol>
          <ttcol align='left'>Description</ttcol>
          <ttcol align='left'>RFC</ttcol>

          <c>MD</c>
          <c>Message Digest for Symmetric Key</c>
          <c>RFCthis</c>

          <c>DS</c>
          <c>Digital Signature for Asymmetric Keys</c>
          <c>RFCthis</c>
        </texttable>

        <t>[RFC Editor: Please replace RFCthis with the published RFC
        number for this document.]</t>

        <t>[Ed Note: are there any special instructions to the
        designated expert reviewer?]</t>
      </section>

    </section>

    <section anchor="security" title="Security Considerations">
      <t>This document describes the concept of URI Signing and how it can be
      used to provide access authorization in the case of interconnected CDNs
      (CDNI). The primary goal of URI Signing is to make sure that only
      authorized UAs are able to access the content, with a Content Service
      Provider (CSP) being able to authorize every individual request. It
      should be noted that URI Signing is not a content protection scheme; if
      a CSP wants to protect the content itself, other mechanisms, such as
      DRM, are more appropriate.</t>

      <t>In general, it holds that the level of protection against
      illegitimate access can be increased by including more claims
      in the signed JWT. The current version of this document
      includes claims for enforcing Client IP Address and Expiration Time,
      however this list can be extended with other, more complex, attributes
      that are able to provide some form of protection against some of the
      vulnerabilities highlighted below.</t>

      <t>That said, there are a number of aspects that limit the level of
      security offered by URI signing and that anybody implementing URI
      signing should be aware of.</t>

      <t><list>
          <t>Replay attacks: A (valid) Signed URI may be used to perform
          replay attacks. The vulnerability to replay attacks can be reduced
          by picking a relatively short window for the Expiration Time
          attribute, although this is limited by the fact that any HTTP-based
          request needs a window of at least a couple of seconds to prevent
          any sudden network issues from preventing legitimate UAs access to
          the content. One may also reduce exposure to replay attacks by
          including a unique one-time access ID via the Nonce attribute (jti claim). Whenever the
          Downstream CDN receives a request with a given unique ID, it
          adds that ID to the list of 'used' IDs. In the case an
          illegitimate UA tries to use the same URI through a replay attack,
          the Downstream CDN can deny the request based on the already-used
          access ID.</t>

          <t>Illegitimate client behind a NAT: In cases where there are
          multiple users behind the same NAT, all users will have the same IP
          address from the point of view of the Downstream CDN. This results
          in the Downstream CDN not being able to distinguish between the
          different users based on Client IP Address and illegitimate users
          being able to access the content. One way to reduce exposure to this
          kind of attack is to not only check for Client IP but also for other
          attributes that can be found in the HTTP headers.</t>
        </list></t>

      <t>The shared key between CSP and Authoritative CDN may be distributed
      to Downstream CDNs - including cascaded CDNs. Since this key can be used
      to legitimately sign a URL for content access authorization, it's
      important to know the implications of a compromised shared key.</t>

      <t>In the case where asymmetric keys are used, the KID information
      element might contain the URL to the public key. To prevent malicious
      clients from signing their own URIs and inserting the associated public
      key URL in the KID field, thereby passing URI validation, it is
      important that CDNs check whether the URI conveyed in the KID field is
      in the allowable set of KIDs as listed in the CDNI metadata or set via
      configuration.</t>
    </section>

    <section title="Privacy">
      <t>The privacy protection concerns described in <xref
      target="I-D.ietf-cdni-logging">CDNI Logging Interface</xref> apply when
      the client's IP address (aud) is embedded in the Signed URI.
      For this reason, the mechanism described in <xref
      target="jwt_profile"/> encrypts the Client IP before
      including it in the URI Signing Package (and thus the URL itself).</t>
    </section>

    <section title="Acknowledgements">
      <t>The authors would like to thank the following people for their
      contributions in reviewing this document and providing feedback: Scott
      Leibrand, Kevin Ma, Ben Niven-Jenkins, Thierry Magnien, Dan York,
      Bhaskar Bhupalam, Matt Caulfield, Samuel Rajakumar, Iuniana Oprescu,
      Leif Hedstrom, Phil Sorber and Gancho Tenev. In addition, Matt Caulfield provided
      content for the CDNI Metadata Interface section.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.2119'?>

      <?rfc include='reference.RFC.6707'?>

      <?rfc include='reference.RFC.5226'?>

      <?rfc include='reference.I-D.ietf-cdni-logging'?>

      <?rfc include='reference.RFC.7519'?>

      <?rfc include='reference.RFC.7516'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.3986'?>

      <?rfc include='reference.RFC.7336'?>

      <?rfc include='reference.RFC.7337'?>

      <?rfc include='reference.I-D.ietf-cdni-metadata'?>

      <?rfc include='reference.I-D.ietf-cdni-redirection'?>

      <?rfc include='reference.RFC.5952'?>

      <?rfc include='reference.RFC.6983'?>

      <?rfc include='reference.I-D.brandenburg-cdni-uri-signing-for-has'?>

      <reference anchor="PCRE839" target="http://www.pcre.org/">
        <front>
          <title>Perl Compatible Regular Expressions</title>
          <author surname="Hazel" initials="P"/>
          <date day="17" month="June" year="2016"/>
        </front>
        <seriesInfo name="Version" value="8.39"/>
      </reference>
      
    </references>
  </back>
</rfc>
